#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Скрипт предварительной обработки текста для
# синтезатора речи RHVoice Ольги Яковлевой
# By Capricorn2001 & vantu5z

from re import sub, finditer

from words_forms import Words
from words_forms import M_GENDER, Z_GENDER, S_GENDER

# Для определения аттрибутов слов
words = Words()

# Количественные числительные
# Родительный падеж
r_ca = (
  (
    (
      (
        'ноля',
        ('тысячи', 'тысяч'),
        ('миллиона', 'миллионов'),
        ('миллиарда', 'миллиардов'),
        ('триллиона', 'триллионов'),
        ('квадриллиона', 'квадриллионов'),
        ('квинтиллиона', 'квинтиллионов'),
        ('секстиллиона', 'секстиллионов'),
        ('септиллиона', 'септиллионов'),
        ('октиллиона', 'октиллионов')
      ),
      'ста',
      'двухсот',
      'трёхсот',
      'четырехсот',
      'пятисот',
      'шестисот',
      'семисот',
      'восьмисот',
      'девятисот'
    ),
    'десяти',
    'двадцати',
    'тридцати',
    'сорока',
    'пятидесяти',
    'шестидесяти',
    'семидесяти',
    'восьмидесяти',
    'девяноста'
  ),
  ('одного', 'одиннадцати'),
  ('двух', 'двенадцати'),
  ('трёх', 'тринадцати'),
  ('четырёх', 'четырнадцати'),
  ('пяти', 'пятнадцати'),
  ('шести', 'шестнадцати'),
  ('семи', 'семнадцати'),
  ('восьми', 'восемнадцати'),
  ('девяти', 'девятнадцати')
)
# Дательный падеж
d_ca = (
  (
    (
      (
        'нолю',
        ('тысяче', 'тысячам'),
        ('миллиону', 'миллионам'),
        ('миллиарду', 'миллиардам'),
        ('триллиону', 'триллионам'),
        ('квадриллиону', 'квадриллионам'),
        ('квинтиллиону', 'квинтиллионам'),
        ('секстиллиону', 'секстиллионам'),
        ('септиллиону', 'септиллионам'),
        ('октиллиону', 'октиллионам')
      ),
      'ста',
      'двумстам',
      'тремстам',
      'четыремстам',
      'пятистам',
      'шестистам',
      'семистам',
      'восьмистам',
      'девятистам'
    ),
    'десяти',
    'двадцати',
    'тридцати',
    'сорока',
    'пятидесяти',
    'шестидесяти',
    'семидесяти',
    'восьмидесяти',
    'девяноста'
  ),
  ('одному', 'одиннадцати'),
  ('двум', 'двенадцати'),
  ('трём', 'тринадцати'),
  ('четырём', 'четырнадцати'),
  ('пяти', 'пятнадцати'),
  ('шести', 'шестнадцати'),
  ('семи', 'семнадцати'),
  ('восьми', 'восемнадцати'),
  ('девяти', 'девятнадцати')
)
# Творительный падеж
t_ca = (
  (
    (
      (
        'нолём',
        ('тысячей', 'тысячами'),
        ('миллионом', 'миллионами'),
        ('миллиардом', 'миллиардами'),
        ('триллионом', 'триллионами'),
        ('квадриллионом', 'квадриллионами'),
        ('квинтиллионом', 'квинтиллионами'),
        ('секстиллионом', 'секстиллионами'),
        ('септиллионом', 'септиллионами'),
        ('октиллионом', 'октиллионами')
      ),
      'ста',
      'двумя стами',
      'тремя стами',
      'четырьмя стами',
      'пятьюстами',
      'шестьюстами',
      'семьюстами',
      'восемьюстами',
      'девятьюстами'
    ),
    'десятью',
    'двадцатью',
    'тридцатью',
    'сорока',
    'пятьюдесятью',
    'шестьюдесятью',
    'семьюдесятью',
    'восемьюдесятью',
    'девяноста'
  ),
  ('одним', 'одиннадцатью'),
  ('двумя', 'двенадцатью'),
  ('тремя', 'тринадцатью'),
  ('четырьмя', 'четырнадцатью'),
  ('пятью', 'пятнадцатью'),
  ('шестью', 'шестнадцатью'),
  ('семью', 'семнадцатью'),
  ('восемью', 'восемнадцатью'),
  ('девятью', 'девятнадцатью')
)
# Винительный падеж
v_ca = (
  (
    (
      (
        'ноль',
        ('тысячу', 'тысяч'),
        ('миллион', 'миллионов'),
        ('миллиард', 'миллиардов'),
        ('триллион', 'триллионов'),
        ('квадриллион', 'квадриллионов'),
        ('квинтиллион', 'квинтиллионов'),
        ('секстиллион', 'секстиллионов'),
        ('септиллион', 'септиллионов'),
        ('октиллион', 'октиллионов')
      ),
      'сто',
      'двести',
      'триста',
      'четыреста',
      'пятьсот',
      'шестьсот',
      'семьсот',
      'восемьсот',
      'девятьсот'
    ),
    'десять',
    'двадцать',
    'тридцать',
    'сорок',
    'пятьдесят',
    'шестьдесят',
    'семьдесят',
    'восемьдесят',
    'девяносто'
  ),
  ('один', 'одиннадцать'),
  ('два', 'двенадцать'),
  ('три', 'тринадцать'),
  ('четыре', 'четырнадцать'),
  ('пять', 'пятнадцать'),
  ('шесть', 'шестнадцать'),
  ('семь', 'семнадцать'),
  ('восемь', 'восемнадцать'),
  ('девять', 'девятнадцать')
)
# Предложный падеж
p_ca = (
  (
    (
      (
        'ноле',
        ('тысяче', 'тысячах'),
        ('миллионе', 'миллионах'),
        ('миллиарде', 'миллиардах'),
        ('триллионе', 'триллионах'),
        ('квадриллионе', 'квадриллионах'),
        ('квинтиллионе', 'квинтиллионах'),
        ('секстиллионе', 'секстиллионах'),
        ('септиллионе', 'септиллионах'),
        ('октиллионе', 'октиллионах')
      ),
      'ста',
      'двухстах',
      'трехстах',
      'четырёхстах',
      'пятистах',
      'шестистах',
      'семистах',
      'восьмистах',
      'девятистах'
    ),
    'десяти',
    'двадцати',
    'тридцати',
    'сорока',
    'пятидесяти',
    'шестидесяти',
    'семидесяти',
    'восьмидесяти',
    'девяноста'
  ),
  ('одном', 'одиннадцати'),
  ('двух', 'двенадцати'),
  ('трёх', 'тринадцати'),
  ('четырёх', 'четырнадцати'),
  ('пяти', 'пятнадцати'),
  ('шести', 'шестнадцатью'),
  ('семи', 'семнадцати'),
  ('восьми', 'восемнадцати'),
  ('девяти', 'девятнадцати')
)
# Порядковые числительные
# Именительный падеж мужского рода
i_mu = (
  (
    (
      (
        'нулевой',
        'тысячный',
        'двухтысячный',
        'трёхтысячный',
        'четырёхтысячный',
        'пятитысячный',
        'шеститысячный',
        'семитысячный',
        'восьмитысячный',
        'девятитысячный'
      ),
      'сотый',
      'двухсотый',
      'трёхсотый',
      'четырёхсотый',
      'пятисотый',
      'шестисотый',
      'семисотый',
      'восьмисотый',
      'девятисотый'
    ),
    'десятый',
    'двадцатый',
    'тридцатый',
    'сороковой',
    'пятидесятый',
    'шестидесятый',
    'семидесятый',
    'восьмидесятый',
    'девяностый'
  ),
  ('первый', 'одиннадцатый'),
  ('второй', 'двенадцатый'),
  ('третий', 'тринадцатый'),
  ('четвёртый', 'четырнадцатый'),
  ('пятый', 'пятнадцатый'),
  ('шестой', 'шестнадцатый'),
  ('седьмой', 'семнадцатый'),
  ('восьмой', 'восемнадцатый'),
  ('девятый', 'девятнадцатый')
)
# Именительный падеж среднего рода
i_sr = (
  (
    (
      (
        'нулевое',
        'тысячное',
        'двухтысячное',
        'трёхтысячное',
        'четырёхтысячное',
        'пятитысячное',
        'шеститысячное',
        'семитысячное',
        'восьмитысячное',
        'девятитысячное'
      ),
      'сотое',
      'двухсотое',
      'трёхсотое',
      'четырёхсотое',
      'пятисотое',
      'шестисотое',
      'семисотое',
      'восьмисотое',
      'девятисотое'
    ),
    'десятое',
    'двадцатое',
    'тридцатое',
    'сороковой',
    'пятидесятое',
    'шестидесятое',
    'семидесятое',
    'восьмидесятое',
    'девяностое'
  ),
  ('первое', 'одиннадцатое'),
  ('второе', 'двенадцатое'),
  ('третье', 'тринадцатое'),
  ('четвёртое', 'четырнадцатое'),
  ('пятое', 'пятнадцатое'),
  ('шестое', 'шестнадцатое'),
  ('седьмое', 'семнадцатое'),
  ('восьмое', 'восемнадцатое'),
  ('девятое', 'девятнадцатое')
)
# Именительный падеж женского рода
i_zh = (
  (
    (
      (
        'нулевая',
        'тысячная',
        'двухтысячная',
        'трёхтысячная',
        'четырёхтысячная',
        'пятитысячная',
        'шеститысячная',
        'семитысячная',
        'восьмитысячная',
        'девятитысячная'
      ),
      'сотая',
      'двухсотая',
      'трёхсотая',
      'четырёхсотая',
      'пятисотая',
      'шестисотая',
      'семисотая',
      'восьмисотая',
      'девятисотая'
    ),
    'десятая',
    'двадцатая',
    'тридцатая',
    'сороковая',
    'пятидесятая',
    'шестидесятая',
    'семидесятая',
    'восьмидесятая',
    'девяностая'
  ),
  ('первая', 'одиннадцатая'),
  ('вторая', 'двенадцатая'),
  ('третья', 'тринадцатая'),
  ('четвёртая', 'четырнадцатая'),
  ('пятая', 'пятнадцатая'),
  ('шестая', 'шестнадцатая'),
  ('седьмая', 'семнадцатая'),
  ('восьмая', 'восемнадцатая'),
  ('девятая', 'девятнадцатая')
)
# Именительный падеж множественного числа
i_mn = (
  (
    (
      (
        'нулевые',
        'тысячные',
        'двухтысячные',
        'трёхтысячные',
        'четырёхтысячные',
        'пятитысячные',
        'шеститысячные',
        'семитысячные',
        'восьмитысячные',
        'девятитысячные'
      ),
      'сотые',
      'двухсотые',
      'трёхсотые',
      'четырёхсотые',
      'пятисотые',
      'шестисотые',
      'семисотые',
      'восьмисотые',
      'девятисотые'
    ),
    'десятые',
    'двадцатые',
    'тридцатые',
    'сороковые',
    'пятидесятые',
    'шестидесятые',
    'семидесятые',
    'восьмидесятые',
    'девяностые'
  ),
  ('первые', 'одиннадцатые'),
  ('вторые', 'двенадцатые'),
  ('третьи', 'тринадцатые'),
  ('четвёртые', 'четырнадцатые'),
  ('пятые', 'пятнадцатые'),
  ('шестые', 'шестнадцатые'),
  ('седьмые', 'семнадцатые'),
  ('восьмые', 'восемнадцатые'),
  ('девятые' 'девятнадцатые')
)
# Родительный падеж мужского рода
r_mu = (
  (
    (
      (
        'нулевого',
        'тысячного',
        'двухтысячного',
        'трёхтысячного',
        'четырёхтысячного',
        'пятитысячного',
        'шеститысячного',
        'семитысячного',
        'восьмитысячного',
        'девятитысячного'
      ),
      'сотого',
      'двухсотого',
      'трёхсотого',
      'четырёхсотого',
      'пятисотого',
      'шестисотого',
      'семисотого',
      'восьмисотого',
      'девятисотого'
    ),
    'десятого',
    'двадцатого',
    'тридцатого',
    'сорокового',
    'пятидесятого',
    'шестидесятого',
    'семидесятого',
    'восьмидесятого',
    'девяностого'
  ),
  ('первого', 'одиннадцатого'),
  ('второго', 'двенадцатого'),
  ('третьего', 'тринадцатого'),
  ('четвёртого', 'четырнадцатого'),
  ('пятого', 'пятнадцатого'),
  ('шестого', 'шестнадцатого'),
  ('седьмого', 'семнадцатого'),
  ('восьмого', 'восемнадцатого'),
  ('девятого', 'девятнадцатого')
)
# Родительный падеж женского рода
r_zh = (
  (
    (
      (
        'нулевой',
        'тысячной',
        'двухтысячной',
        'трёхтысячной',
        'четырёхтысячной',
        'пятитысячной',
        'шеститысячной',
        'семитысячной',
        'восьмитысячной',
        'девятитысячной'
      ),
      'сотой',
      'двухсотой',
      'трёхсотой',
      'четырёхсотой',
      'пятисотой',
      'шестисотой',
      'семисотой',
      'восьмисотой',
      'девятисотой'
    ),
    'десятой',
    'двадцатой',
    'тридцатой',
    'сороковой',
    'пятидесятой',
    'шестидесятой',
    'семидесятой',
    'восьмидесятой',
    'девяностой'
  ),
  ('первой', 'одиннадцатой'),
  ('второй', 'двенадцатой'),
  ('третьей', 'тринадцатой'),
  ('четвёртой', 'четырнадцатой'),
  ('пятой', 'пятнадцатой'),
  ('шестой', 'шестнадцатой'),
  ('седьмой', 'семнадцатой'),
  ('восьмой', 'восемнадцатой'),
  ('девятой', 'девятнадцатой')
)
# Родительный падеж множественного числа
r_mn = (
  (
    (
      (
        'нулевых',
        'тысячных',
        'двухтысячных',
        'трёхтысячных',
        'четырёхтысячных',
        'пятитысячных',
        'шеститысячных',
        'семитысячных',
        'восьмитысячных',
        'девятитысячных'
      ),
      'сотых',
      'двухсотых',
      'трёхсотых',
      'четырёхсотых',
      'пятисотых',
      'шестисотых',
      'семисотых',
      'восьмисотых',
      'девятисотых'
    ),
    'десятых',
    'двадцатых',
    'тридцатых',
    'сороковых',
    'пятидесятых',
    'шестидесятых',
    'семидесятых',
    'восьмидесятых',
    'девяностых'
  ),
  ('первых', 'одиннадцатых'),
  ('вторых', 'двенадцатых'),
  ('третьих', 'тринадцатых'),
  ('сороковых', 'четырнадцатых'),
  ('пятых', 'пятнадцатых'),
  ('шестых', 'шестнадцатых'),
  ('седьмых', 'семнадцатых'),
  ('восьмых', 'восемнадцатых'),
  ('девятых' 'девятнадцатых')
)
# Дательный падеж мужского рода
d_mu = (
  (
    (
      (
        'нулевому',
        'тысячному',
        'двухтысячному',
        'трёхтысячному',
        'четырёхтысячному',
        'пятитысячному',
        'шеститысячному',
        'семитысячному',
        'восьмитысячному',
        'девятитысячному'
      ),
      'сотому',
      'двухсотому',
      'трёхсотому',
      'четырёхсотому',
      'пятисотому',
      'шестисотому',
      'семисотому',
      'восьмисотому',
      'девятисотому'
    ),
    'десятому',
    'двадцатому',
    'тридцатому',
    'сороковому',
    'пятидесятому',
    'шестидесятому',
    'семидесятому',
    'восьмидесятому',
    'девяностому'
  ),
  ('первому', 'одиннадцатому'),
  ('второму', 'двенадцатому'),
  ('третьему', 'тринадцатому'),
  ('четвёртому', 'четырнадцатому'),
  ('пятому', 'пятнадцатому'),
  ('шестому', 'шестнадцатому'),
  ('седьмому', 'семнадцатому'),
  ('восьмому', 'восемнадцатому'),
  ('девятому', 'девятнадцатому')
)
# Творительный падеж мужского рода
t_mu = (
  (
    (
      (
        'нулевым',
        'тысячным',
        'двухтысячным',
        'трёхтысячным',
        'четырёхтысячным',
        'пятитысячным',
        'шеститысячным',
        'семитысячным',
        'восьмитысячным',
        'девятитысячным'
      ),
      'сотым',
      'двухсотым',
      'трёхсотым',
      'четырёхсотым',
      'пятисотым',
      'шестисотым',
      'семисотым',
      'восьмисотым',
      'девятисотым'
    ),
    'десятым',
    'двадцатым',
    'тридцатым',
    'сороковым',
    'пятидесятым',
    'шестидесятым',
    'семидесятым',
    'восьмидесятым',
    'девяностым'
  ),
  ('первым', 'одиннадцатым'),
  ('вторым', 'двенадцатым'),
  ('третьим', 'тринадцатым'),
  ('четвёртым', 'четырнадцатым'),
  ('пятым', 'пятнадцатым'),
  ('шестым', 'шестнадцатым'),
  ('седьмым', 'семнадцатым'),
  ('восьмым', 'восемнадцатым'),
  ('девятым', 'девятнадцатым')
)
# Творительный падеж множественного числа
t_mn = (
  (
    (
      (
        'нулевыми',
        'тысячными',
        'двухтысячными',
        'трёхтысячными',
        'четырёхтысячными',
        'пятитысячными',
        'шеститысячными',
        'семитысячными',
        'восьмитысячными',
        'девятитысячными'
      ),
      'сотыми',
      'двухсотыми',
      'трёхсотыми',
      'четырёхсотыми',
      'пятисотыми',
      'шестисотыми',
      'семисотыми',
      'восьмисотыми',
      'девятисотыми'
    ),
    'десятыми',
    'двадцатыми',
    'тридцатыми',
    'сороковыми',
    'пятидесятыми',
    'шестидесятыми',
    'семидесятыми',
    'восьмидесятыми',
    'девяностыми'
  ),
  ('первыми', 'одиннадцатым'),
  ('вторыми', 'двенадцатым'),
  ('третьими', 'тринадцатым'),
  ('четвёртыми', 'четырнадцатым'),
  ('пятыми', 'пятнадцатым'),
  ('шестыми', 'шестнадцатым'),
  ('седьмым', 'семнадцатым'),
  ('восьмыми', 'восемнадцатым'),
  ('девятыми' 'девятнадцатым')
)
# Винительный падеж женского рода
v_zh = (
  (
    (
      (
        'нулевую',
        'тысячную',
        'двухтысячную',
        'трёхтысячную',
        'четырёхтысячную',
        'пятитысячную',
        'шеститысячную',
        'семитысячную',
        'восьмитысячную',
        'девятитысячную'
      ),
      'сотую',
      'двухсотую',
      'трёхсотую',
      'четырёхсотую',
      'пятисотую',
      'шестисотую',
      'семисотую',
      'восьмисотую',
      'девятисотую'
    ),
    'десятую',
    'двадцатую',
    'тридцатую',
    'сороковую',
    'пятидесятую',
    'шестидесятую',
    'семидесятую',
    'восьмидесятую',
    'девяностую'
  ),
  ('первую', 'одиннадцатую'),
  ('вторую', 'двенадцатую'),
  ('третью', 'тринадцатую'),
  ('четвёртую', 'четырнадцатую'),
  ('пятую', 'пятнадцатую'),
  ('шестую', 'шестнадцатую'),
  ('седьмую', 'семнадцатую'),
  ('восьмую', 'восемнадцатую'),
  ('девятую', 'девятнадцатую')
)
# Предложный падеж мужского рода
p_mu = (
  (
    (
      (
        'нулевом',
        'тысячном',
        'двухтысячном',
        'трёхтысячном',
        'четырёхтысячном',
        'пятитысячном',
        'шеститысячном',
        'семитысячном',
        'восьмитысячном',
        'девятитысячном'
      ),
      'сотом',
      'двухсотом',
      'трёхсотом',
      'четырёхсотом',
      'пятисотом',
      'шестисотом',
      'семисотом',
      'восьмисотом',
      'девятисотом'
    ),
    'десятом',
    'двадцатом',
    'тридцатом',
    'сороковом',
    'пятидесятом',
    'шестидесятом',
    'семидесятом',
    'восьмидесятом',
    'девяностом'
  ),
  ('первом', 'одиннадцатом'),
  ('втором', 'двенадцатом'),
  ('третьем', 'тринадцатом'),
  ('четвёртом', 'четырнадцатом'),
  ('пятом', 'пятнадцатом'),
  ('шестом', 'шестнадцатом'),
  ('седьмом', 'семнадцатом'),
  ('восьмом', 'восемнадцатом'),
  ('девятом', 'девятнадцатом')
)
# Сопоставление остальных форм
r_sr = r_mu
d_sr = d_mu
d_zh = r_zh
d_mn = t_mu
t_sr = t_mu
t_zh = r_zh
p_sr = p_mu
p_zh = r_zh
p_mn = r_mn

# Определение падежа по окончанию
mn_pad = {'е': i_mn, 'м': d_mn, 'х': r_mn, 'ми': t_mn}
mu_pad = {'': i_mu, 'а': r_mu, 'у': d_mu, 'ом': t_mu, 'е': p_mu, 'й': i_mu,
          'я': r_mu, 'ю': d_mu, 'ем': t_mu, 'и': p_mu}
sr_pad = {'е': i_sr, 'у': d_sr, 'ю': d_sr, 'я': r_sr, 'ем': t_sr, 'и': p_sr}
zh_pad = {'а': i_zh, 'ы': r_zh, 'е': d_zh, 'ой': t_zh, 'у': v_zh}
adj_pad = {'ий': i_mu, 'его': r_mu, 'ему': d_mu, 'им': t_mu, 'ем': p_mu,
           'ый': i_mu, 'ого': r_mu, 'ому': d_mu, 'ым': t_mu, 'ом': p_mu,
           'ее': i_sr, 'ое': i_sr, 'ая': i_zh, 'яя': i_zh, 'ей': r_zh,
           'ой': r_zh, 'ую': v_zh, 'юю': v_zh, 'ие': i_mn, 'им': d_mn,
           'их': r_mn, 'ими': t_mn, 'ые': i_mn, 'ым': d_mn,
           'ых': r_mn, 'ыми': t_mn}

months = r' (января|февраля|марта|апреля|мая|июня|июля|августа|сентября|октября|ноября|декабря)'

# Обозначения единиц измерения и числительных
units = r"(%|°|'|℃|В\b|К\b|М\b|£|₽|\$|(|к|М|Г)(Гц|пк)|(к|м)г\b|(|мк|к|с|м)м\b|(|к|с|м)м²|(|к|с|м)м³|(|к|М)т\b|(|к|М|Г)Вт\b|сек\b|л\.с\.|а\.е\.|шт\.|ед\.|трлн)"
zh_units = ('т', 'кт', 'Мт', 'а.е.', 'л.с.', 'сек', "'", 'ед.', 'шт.')

# Падежные формы единиц измерения и числительных
# в единственном/множественном числе:
# именительный, родительный, дательный, творительный, предложный
# и форма именительного падежа для числительных 2, 3, 4
forms = {
  '%':    ('процент', 'процентов', 'процента', 'процентов',
           'проценту', 'процентам', 'процентом', 'процентами',
           'проценте', 'процентах', 'процента'),
  '°':    ('градус', 'градусов', 'градуса', 'градусов', 'градусу', 'градусам',
           'градусом', 'градусами', 'градусе', 'градусах', 'градуса'),
  '℃':    ('градус Цельсия', 'градусов Цельсия', 'градуса Цельсия',
           'градусов Цельсия', 'градусу Цельсия', 'градусам Цельсия',
           'градусом Цельсия', 'градусами Цельсия', 'градусе Цельсия',
           'градусах Цельсия', 'градуса Цельсия'),
  'В':    ('вольт', 'вольт', 'вольта', 'вольт', 'вольту', 'вольтам',
           'вольтом', 'вольтами', 'вольте', 'вольтах', 'вольта'),
  'К':    ('Кельвин', 'Кельвинов', 'Кельвина', 'Кельвинов',
           'Кельвину', 'Кельвинам', 'Кельвином', 'Кельвинами',
           'Кельвине', 'Кельвинах', 'Кельвина'),
  '$':    ('доллар', 'долларов', 'доллара', 'долларов', 'доллару', 'долларам',
           'долларом', 'долларами', 'долларе', 'долларах', 'доллара'),
  'кг':   ('килограмм', 'килограммов', 'килограмма', 'килограммов',
           'килограмму', 'килограммам', 'килограммом', 'килограммами',
           'килограмме', 'килограммах', 'килограмма'),
  'км':   ('километр', 'километров', 'километра', 'километров', 'километру',
           'километрам', 'километром', 'километрами', 'километре',
           'километрах', 'километра'),
  'мг':   ('миллиграмм' 'миллиграммов', 'миллиграмма', 'миллиграммов',
           'миллиграмму', 'миллиграммам', 'миллиграммом', 'миллиграммами',
           'миллиграмме', 'миллиграммах', 'миллиграмма'),
  'мм':   ('миллиметр', 'миллиметров', 'миллиметра', 'миллиметров',
           'миллиметру', 'миллиметрам', 'миллиметром', 'миллиметрами',
           'миллиметре', 'миллиметрах', 'миллиметра'),
  'см':   ('сантиметр', 'сантиметров', 'сантиметра', 'сантиметров',
           'сантиметру', 'сантиметрам', 'сантиметром', 'сантиметрами',
           'сантиметре', 'сантиметрах', 'сантиметра'),
  'трлн': ('триллион', 'триллионов', 'триллиона', 'триллионов', 'триллиону',
           'триллионам', 'триллионом', 'триллионами', 'триллионе',
           'триллионах', 'триллиона'),
  'м':    ('метр', 'метров', 'метра', 'метров', 'метру', 'метрам',
           'метром', 'метрами', 'метре', 'метрах', 'метра'),
  'мкм':  ('микрометр', 'микрометров', 'микрометра', 'микрометров',
           'микрометру', 'микрометрам', 'микрометром', 'микрометрами',
           'микрометре', 'микрометрах', 'микрометра'),
  'кт':   ('килотонна', 'килотонн', 'килотонны', 'килотонн', 'килотонне',
           'килотоннам', 'килотонной', 'килотоннами', 'килотонне',
           'килотоннах', 'килотонны'),
  'Мт':   ('мегатонна', 'мегатонн', 'мегатонны', 'мегатонн', 'мегатонне',
           'мегатоннам', 'мегатонной', 'мегатоннами', 'мегатонне',
           'мегатоннах', 'мегатонны'),
  'т':    ('тонна', 'тонн', 'тонны', 'тонн', 'тонне', 'тоннам', 'тонной',
           'тоннами', 'тонне', 'тоннах', 'тонны'),
  'кВт':  ('киловатт', 'киловатт', 'киловатта', 'киловатт', 'киловатту',
           'киловаттам', 'киловаттом', 'киловаттами', 'киловатте',
           'киловаттах', 'киловатта'),
  'МВт':  ('мегаватт', 'мегаватт', 'мегаватта', 'мегаватт', 'мегаватту',
           'мегаваттам', 'мегаваттом', 'мегаваттами', 'мегаватте',
           'мегаваттах', 'мегаватта'),
  'ГВт':  ('гигаватт', 'гигаватт', 'гигаватта', 'гигаватт', 'гигаватту',
           'гигаваттам', 'гигаваттом', 'гигаваттами', 'гигаватте',
           'гигаваттах', 'гигаватта'),
  'Вт':   ('ватт', 'ватт', 'ватта', 'ватт', 'ватту', 'ваттам', 'ваттом',
           'ваттами', 'ватте', 'ваттах', 'ватта'),
  'кГц':  ('килогерц', 'килогерц', 'килогерца', 'килогерц', 'килогерцу',
           'килогерцам', 'килогерцем', 'килогерцами', 'килогерце',
           'килогерцах', 'килогерца'),
  'МГц':  ('мегагерц', 'мегагерц', 'мегагерца', 'мегагерц', 'мегагерцу',
           'мегагерцам', 'мегагерцем', 'мегагерцами', 'мегагерце',
           'мегагерцах', 'мегагерца'),
  'ГГц':  ('гигагерц', 'гигагерц', 'гигагерца', 'гигагерц', 'гигагерцу',
           'гигагерцам', 'гигагерцем', 'гигагерцами', 'гигагерце',
           'гигагерцах', 'гигагерца'),
  'Гц':   ('герц', 'герц', 'герца', 'герц', 'герцу', 'герцам', 'герцем',
           'герцами', 'герце', 'герцах', 'герца'),
  '₽':    ('рубль', 'рублей', 'рубля', 'рублей', 'рублю', 'рублям',
           'рублём', 'рублями', 'рубле', 'рублях', 'рубля'),
  '£':    ('фунт стерлингов', 'фунтов стерлингов', 'фунта стерлингов',
           'фунтов стерлингов', 'фунту стерлингов', 'фунтам стерлингов',
           'фунтом стерлингов', 'фунтами стерлингов', 'фунте стерлингов',
           'фунтах стерлингов', 'фунта стерлингов'),
  'а.е.': ('астрономическая единица', 'астрономических единиц',
           'астрономической единицы', 'астрономических единиц',
           'астрономической единице', 'астрономическим единицам',
           'астрономической единицей', 'астрономическими единицами',
           'астрономической единице', 'астрономических единицах',
           'астрономические единицы'),
  'л.с.': ('лошадиная сила', 'лошадиных сил', 'лошадиной силы',
           'лошадиных сил', 'лошадиной силе', 'лошадиным силам',
           'лошадиной силой', 'лошадиными силами', 'лошадиной силе',
           'лошадиных силах', 'лошадиные силы'),
  'м²':   ('метр квадратный', 'метров квадратных', 'метра квадратного',
           'метров квадратных', 'метру квадратному', 'метрам квадратным',
           'метром квадратным', 'метрами квадратными', 'метре квадратном',
           'метрах квадратных', 'метра квадратных'),
  'мм²':  ('миллиметр квадратный', 'миллиметров квадратных',
           'миллиметра квадратного', 'миллиметров квадратных',
           'миллиметру квадратному', 'миллиметрам квадратным',
           'миллиметром квадратным', 'миллиметрами квадратными',
           'миллиметре квадратном', 'миллиметрах квадратных',
           'миллиметра квадратных'),
  'см²':  ('сантиметр квадратный', 'сантиметров квадратных',
           'сантиметра квадратного', 'сантиметров квадратных',
           'сантиметру квадратному', 'сантиметрам квадратным',
           'сантиметром квадратным', 'сантиметрами квадратными',
           'сантиметре квадратном', 'сантиметрах квадратных',
           'сантиметра квадратных'),
  'км²':  ('километр квадратный', 'километров квадратных',
           'километра квадратного', 'километров квадратных',
           'километру квадратному', 'километрам квадратным',
           'километром квадратным', 'километрами квадратными',
           'километре квадратном', 'километрах квадратных',
           'километра квадратных'),
  'м³':   ('метр кубический', 'метров кубических', 'метра кубического',
           'метров кубических', 'метру кубическому', 'метрам кубическим',
           'метром кубическим', 'метрами кубическими', 'метре кубическом',
           'метрах кубических', 'метра кубических'),
  'мм³':  ('миллиметр кубический', 'миллиметров кубических',
           'миллиметра кубического', 'миллиметров кубических',
           'миллиметру кубическому', 'миллиметрам кубическим',
           'миллиметром кубическим', 'миллиметрами кубическими',
           'миллиметре кубическом', 'миллиметрах кубических',
           'миллиметра кубических'),
  'см³':  ('сантиметр кубический', 'сантиметров кубических',
           'сантиметра кубического', 'сантиметров кубических',
           'сантиметру кубическому', 'сантиметрам кубическим',
           'сантиметром кубическим', 'сантиметрами кубическими',
           'сантиметре кубическом', 'сантиметрах кубических',
           'сантиметра кубических'),
  'км³':  ('километр кубический', 'километров кубических',
           'километра кубического', 'километров кубических',
           'километру кубическому', 'километрам кубическим',
           'километром кубическим', 'километрами кубическими',
           'километре кубическом', 'километрах кубических',
           'километра кубических'),
  'сек':  ('секунда', 'секунд', 'секунды', 'секунд', 'секунде', 'секундам',
           'секундой', 'секундами', 'секунде', 'секундах', 'секунды'),
  "'":    ('минута', 'минут', 'минуты', 'минут', 'минуте', 'минутам',
           'минутой', 'минутами', 'минуте', 'минутах', 'минуты'),
  'шт.':  ('штука', 'штук', 'штуки', 'штук', 'штуке', 'штукам',
           'штукой', 'штуками', 'штуке', 'штуках', 'штуки'),
  'М':    ('Мах', 'Махов', 'Маха', 'Махов', 'Маху', 'Махам',
           'Махом', 'Махами', 'Махе', 'Махах', 'Маха'),
  'ед.':  ('единица', 'единиц', 'единицы', 'единиц', 'единице', 'единицам',
           'единицей', 'единицами', 'единице', 'единицах', 'единицы'),
  'кпк':  ('килопарсек', 'килопарсеков', 'килопарсека', 'килопарсеков',
           'килопарсеку', 'килопарсекам', 'килопарсеком', 'килопарсеками',
           'килопарсеке', 'килопарсеках', 'килопарсека'),
  'Мпк':  ('мегапарсек', 'мегапарсеков', 'мегапарсека', 'мегапарсеков',
           'мегапарсеку', 'мегапарсекам', 'мегапарсеком', 'мегапарсеками',
           'мегапарсеке', 'мегапарсеках', 'мегапарсека'),
  'Гпк':  ('гигапарсек', 'гигапарсеков', 'гигапарсека', 'гигапарсеков',
           'гигапарсеку', 'гигапарсекам', 'гигапарсеком', 'гигапарсеками',
           'гигапарсеке', 'гигапарсеках', 'гигапарсека'),
  'пк':   ('парсек', 'парсеков', 'парсека', 'парсеков', 'парсеку', 'парсекам',
           'парсеком', 'парсеками', 'парсеке', 'парсеках', 'парсека')
}

# Шаблоны
presamples = (
  (r'[‑–−—]', '-'),
  (r' ?\+ ?', ' плюс '),
  (r'(?<!\w)-(?=\d)', 'минус '),
  (r'\u00A0|\u2009', ' '),
  (r' {2,}', ' '),
  (r' (\n|\Z)', r'\1'),
  (r'\n{2,}', r'\n'),
  ('…', '...'),
  (r'[«»"]', ''),
  (r'(?<=\d)/(?=\d)', '_дробь_'),

  ('л\. с\.', 'л.с.'),
  (r' ?\& ?', ' and '),

  (r'(?<=\d) (?=\d{3}\b)', ''),
  (r'(\d+,)((\d{3})+) (\d{1,2}\b)', r'\1\2\4'),

  (r' им\. ((|(|[А-Я]\.)[А-Я]\. ?)[А-Я][а-яё]+)', r' имени \1'),
  (r'(?<=\d) ?кв\. ?((|к|с|м)м)\b', r' \1²'),
  (r'(?<=\d) ?куб\. ?((|к|с|м)м)\b', r' \1³'),

  (r'\b(в|вв|\d+ ?г|\d+-й г|гг|др|д|п|с|э|долл|руб|кв|обл|тыс|ш|шт|чел|ед|рт\. ст)\.(\Z|\n| [А-Я][ а-я]+)', r'\1..\2'),

  (r"(°|')(\d{1,2})", r'\1 \2'),
  (r'''('\d{1,2})"''', r'\1сек'),
  (r' ?с\. ?ш\.', ' северной широты'),
  (r' ?ю\. ?ш\.', ' южной широты'),
  (r' ?в\. ?д\.', ' восточной долготы'),
  (r' ?з\. ?д\.', ' западной долготы'),

  (r'\bмск\b', 'по московскому времени'),
  (r'\b(\d+ мм )рт\. ст\.', r'\1ртутного столба'),

  (r'\b([Оо]к)\. (\d+)', r'\1оло \2'),

  (r'\b(\d*[02-9][234]|[234]) ?чел\.', r'\1 человека'),
  (r'\b((\d+,|)\d+ (тыс\. |млн |))чел\.', r'\1человек'),
  (r'([Бб]олее|[Мм]енее|[Оо]коло)( \d+) ?чел\.', r'\1\2 человек'),
  (r'([015-9]) ?чел\.', r'\1 человек'),

  (r'§§ ?\b', r'параграфы '),
  (r'§ ?\b', r'параграф '),
  ('˚', '°'),
  (r'° ?[CС]\b', '℃'),
  (r'\bUSD\b', '$ США'),
  (r'\bдолл\.', '$'),
  (r'\bруб\.', '₽'),
  (r'(млн|млрд|трлн)\. ' + units, r'\1 \2'), # По правилам без точки
  (r'(млн|млрд|трлн)\.(?! [А-Я]|\n|\Z)', r'\1'),

  (r'(\d+,\d+) ?тыс\.', r'\1 тысячи'),
  (r'(\d+,\d+) ?млн', r'\1 миллиона'),
  (r'(\d+,\d+) ?млрд', r'\1 миллиарда'),
  (r'(?<=\d) ?тыс\.', '000'),
  (r'(?<=\d) ?млн', '000000'),
  (r'(?<=\d) ?млрд', '000000000'),

  (r'\b(\d{3,})М\b', r'\1 Эм'), # Предотвращает чтение "М" как число Маха с большими числами
  (r'((\s|\A|\(| )((\d+,|)\d+|)[+-]?(\d+,|)\d+) ?' + units, r'\1_\6'),

  (r'(?<!\d )(\$|€|£|₽) (?=\d)', r'\1'),
  (r'\$(((\d+,|)\d+|)[+-]?(\d+,|)\d+) (трлн)', r'\1_\5 долларов'),
  (r'€(((\d+,|)\d+|)[+-]?(\d+,|)\d+) (трлн)', r'\1_\5 €'),
  (r'£(((\d+,|)\d+|)[+-]?(\d+,|)\d+) (трлн)', r'\1_\5 фунтов стерлингов'),
  (r'₽(((\d+,|)\d+|)[+-]?(\d+,|)\d+) (трлн)', r'\1_\5 рублей'),
  (r'(\$|€|£|₽)((((\d+,|)\d+ ?- ?)|)(\d+,|)\d+)\b', r'\2_\1'),
  (r'_(\$|€|£|₽) (тысяч(|ам?|ами|и)\b|(миллион|миллиард|триллион)(|ам?|ами|ов)\b)', r' \2 \1'),
  ('[ _]?€', ' евро'),

  # В названиях, обозначениях, номерах: правильное чтение букв и числительных
  (r'([а-яА-Я]-?\d+-?)В\b', r'\1Вэ'),
  (r'([а-яА-Я]-?\d+-?)К\b', r'\1Ка'),
  (r'([а-яА-Я]-?\d+-?)М\b', r'\1Эм'),
  (r'(\d?)В(-?\d)', r'\1Вэ\2'),
  (r'(\d?)К(-?\d)', r'\1Ка\2'),
  (r'(\d?)С(-?\d)', r'\1Эс\2'),
  (r'([0-9-])С([0-9-])', r'\1Эс\2'),
  (r'([a-zA-Zа-яА-Я]-?\d+) (\D{4,})', r'\1_\2'),
  (r'\b([Вв] )№№ ?(?=\d+)\b', r'\1номерах_'),
  (r'\b([Вв] )№ ?(?=\d+)\b ', r'\1номере_'),
  (r'№№ ?(?=\d+)\b', 'номера_'),
  (r'№ ?(?=\d+)\b', r'номер_'),

  (r'(?<=\d-)ом\b', 'м'),
  (r'(?<=\d-)[ео]й\b', 'й'),
  (r'(?<=\d-)ая\b', 'я'),

  (r'(\d) ?g\b', r'\1 же'), # Ускорение свободного падения на поверхности Земли

  (r'(?<=\d) ?[×xXхХ] ?(?=\d)', ' на '),
  (r' ?± ?', ' плюс-минус '),
  (r' ?= ?', ' равно '),
  (r' ?≠ ?', ' не равно '),
  (r' ?≈ ?', ' приближённо равно '),
  (r' ?> ?', ' больше '),
  (r' ?< ?', ' меньше '),
  (r' ?(⩾|≥) ?', ' больше или равно '),
  (r' ?(⩽|≤) ?', ' меньше или равно '),
  (r' ?~(?=\d)', ' приблизительно '),

  (r'\bч\.( \d+)\b', r'часть\1-я'),
  (r'\bп\.( \d+)\b', r'пункт\1-й'),
  (r'(([Вв] течение|[Сс]о?|[Дд]о|[Пп]осле) [IV]{1,3} кв)\.', r'\1артала'),
  (r'([Вв]о? [IV]{1,3} кв)\.', r'\1артале'),
  (r'([Кк]о? [IV]{1,3} кв)\.', r'\1арталу'),
  (r'([IV]{1,3} кв)\.', r'\1артал'),
  (r'\bкв\.( \d+)', r'квартира\1'),
  (r'\bд\.( \d+)', r'дом\1'),
  (r'\bул\.', 'улица'),
  (r'\bпр(-т|осп\.)', 'проспект'),
  (r'([А-Я][а-яё]+(ая|ую) обл)\.', r'\1асть'),
  (r'([А-Я][а-яё]+ой обл)\.', r'\1асти'),
  (r'\b([Вв] г)\.( [А-Я][а-яё]+)\b', r'\1ороде\2'),
  (r'\b([Дд]о|[Ии]з|[Оо]т) г\.( [А-Я][а-яё]+)\b', r'\1 города\2'),
  (r'\b([Гг])\.( [А-Я][а-яё]+)\b', r'\1ород\2'),

  (r'\bг\.г\.', 'гг.'),
  (r'\bХХ\b', '20'),
  (r'\bID\b', 'ай-ди'),
  (r'ВКП\(б\)', 'вэкапэ-бэ'),
  (r'\b([Гг]ипер|[Сс]упер)([а-яё]+)\b', r'\1-\2'), # Предотвращает неправильное ударение

  (r'P\.((P\.)*)S\.', r'Пост-\1скриптум.'),
  (r'(P\.)(?=(P\.)*скриптум.)', 'пост-'),
  (r'\b[Тт]\. ?е\.', 'то есть'),
  (r' т\. ?д\.', ' так далее'),
  (r' т\. ?п\.', ' тому подобное'),
  (r' т\. ?к\.', ' так как'),
  (r'в т\. ?ч\.', 'в том числе'),
  (r' н\. ?э\.', ' новой эры'),
  (r' с\. ?г\.', ' сего года'),
  (r'(?<!\d )\bсм\.', 'смотри'),
  (r'\b[Пп]рим\. авт\.', 'примечание автора'),
  (r'\b[Пп]рим\. ред\.', 'примечание редактора'),
  (r'\b[Пп]рим\. пер(ев|)\.', 'примечание переводчика'),
  (r'\b[Аа]вт\.', 'автор'),
  (r'\b[Рр]ед\.', 'редактор'),
  (r'\b[Пп]рим\.', 'примечание'),
  (r'точк([аеийоу]{1,2}) над i', r'точк\1 над и-'),
  (r'\b([Дд])-(р|ра|ре|ром|ру)\b', r'\1окто\2'),
  (r'\b([Гг])-(н|на|не|ном|ну)\b', r'\1осподи\2'),
  (r'\b([Гг])-(жа|же|жи|жой|жу)\b', r'\1оспо\2'),
  (r'\b([Кк]ол)-(ва|ве|во|вом|ву)\b', r'\1ичест\2'),
  (r'\bр-н(|а|е|ом|у)\b', r'район\1'),

  (r'\b[Вв]/ч\b', 'вэ-че'),
  (r'/(сек|с)\b', ' в секунду'),
  (r'/(час|ч)\b', ' в час'),
  (r'(?<=\d) ?V\b', '_В'),

#  (r'(\d)(½|¼|¾|⅕|⅖|⅗|⅘|⅙|⅚|⅐|⅛|⅜|⅝|⅞|⅑)', r'\1 и \2'),
#  ('½', 'одна вторая'),
#  ('⅓', 'одна треть'),
#  ('⅔', 'две трети'),
#  ('¼', 'одна четверть'),
#  ('¾', 'три четверти'),
#  ('⅕', 'одна пятая'),
#  ('⅖', 'две пятых'),
#  ('⅗', 'три пятых'),
#  ('⅘', 'четыре пятых'),
#  ('⅙', 'одна шестая'),
#  ('⅚', 'пять шестых'),
#  ('⅐', 'одна седьмая'),
#  ('⅛', 'одна восьмая'),
#  ('⅜', 'три восьмых'),
#  ('⅝', 'пять восьмых'),
#  ('⅞', 'семь восьмых'),
#  ('⅑', 'одна девятая'),

  (r'(\d)-(\d)', r'\1 - \2'),
  (r'\b([IVX]+)-([IVX]+)\b', r'\1 - \2'),

  # Замена "е" на "ё" по сложному шаблону
  ('[Вв]се-таки', 'всё-таки'),
  (r'[Вв]се, что(бы | )', r'всё, что\1'),
  (r'\b([Вв]с)е( [а-яё]+ое)\b', r'\1ё\2'),

  # Ударение (параметр "stress_marker=+" должен быть указан в RHVoice.conf)
  #(r'\b([Сс]т)(оит( ли | )[а-яё]+[аеиуыя]ть)', r'\1+\2'),
  #(r'\b([А-Я]?[а-яё]+[аеиуя]ть (|не )ст)оит\b', r'\1+оит'),
  #(r'([Ии]з-за войн)ы', r'\1+ы'),
  #(r'([Пп]олн)ым-полно', r'\1+ым-полн+о'),
  #(r'(-на-Дон)у\b', r'\1+у'),

  (r'\b(\d+)-ю( [а-яё]+ми)\b', r'\1\2'), # Излишнее наращение

  (r'(?<![,.:;!?-]|\))(\n|\Z)', r'.\1')
)

samples = (
  (r'(?<=\d)(г\.|гг\.)', r' \1'),

  (r'\b([Яя]нвар[еюьям]{1,2}|[Фф]еврал[еюьям]{1,2}|[Мм]арт[аеуом]{0,2}|[Аа]прел[еюьям]{1,2}|[Мм]а[йюяем]{1,2}|[Ии]ю[лн][еюьям]{1,2}|[Аа]вгуст[аеуом]{0,2}|[Сс]ентябр[еюьям]{1,2}|[Оо]ктябр[еюьям]{1,2}|[Нн]оябр[еюьям]{1,2}|[Дд]екабр[еюьям]{1,2}|[Зз]им[аеуой]{1,2}|[Лл]ет[ауом]{1,2}|[Вв]есн[аеуыой]{1,2}|[Оо]сен[иью]{1,2})( \d{4}\b)(?!-|[.:]\d)', r'\1\2-го'),
  (r'([Зз]им[аеуой]{1,2} \d+-го ?- ?\d+\b)(?!-го)', r'\1-го'),

  (r'([а-я]{3,8} )(\d+) ?- ?([а-я]{3,8} )(\d+-го)', r'\1\2-го \3\4'),

  (r'(месяц(|а|ев|ы) \d+)(?= г\.)', r'\1-го'),
  (r'(месяц(|а|ев|ы) \d+)( [-и] \d+)(?= гг\.)', r'\1-го\3-го'),
  (r'([Сс] \d+)( на \d+)' + months, r'\1-го\2 \3'),
  (r'([Пп]еред \d+)' + months, r'\1-м \2'),
  (r'\b(([Зз]а|[Нн]а) \d+)( - \d+)' + months, r'\1-е\3-е \4'),
  (r'\b([Зз]а|[Нн]а|[Пп]о)( \d+)' + months, r'\1\2-е \3'),
  (r'\b([Дд]о|[Нн]е позднее|[Нн]е ранее|[Пп]осле|[Сс]о?)( \d+)' + months, r'\1\2-го \3'),
  (r'\b([Кк]о?)( \d+)' + months, r'\1\2-му \3'),
  (r'\b(\d+)( [-и] | или )(\d+)' + months, r'\1-го\2\3-го \4'),

  (r'(начал[аеому]{1,2}|середин[аеойуы]{1,2}|кон[ецауом]{2,3}|половин[аеуыой]{1,2})( \d+0) гг\.', r'\1\2-х годов'),

  (r'\b(([Зз]а|[Нн]а) \d\d?)\.(\d\d?)\.(\d\d(\d\d)?)\b', r'\1-е \3-го \4-го'),
  (r'\b([Кк] \d\d?)\.(\d\d?)\.(\d\d(\d\d)?)\b', r'\1-му \2-го \3-го'),
  (r'\b(\d\d?)\.(\d\d?)\.(\d\d(\d\d)?)\b', r'\1-го \2-го \3-го'),
  (r'(ноч[иь] со? \d+)( на \d+)', r'\1-го\2'),
  (r'\b([Сс]о? \d+)( по \d+-е)', r'\1-го\2'),

  (r'\b(\d+[1-9])( [-и] \d+ | )годов\b', r'\1-го\2годов'),
  (r'\b(\d+-го [-и] \d+)(?!-го)\b', r'\1-го'),

  (r'\b([Кк] \d+)( - \d+) (годам|гг\.)', r'\1-му\2-му годам'),
  (r'(\d+0-м )(гг\.)', r'\1годам'),
  (r'(-го )гг\.', r'\1годов'),

  (r'(([Вв]|[Оо]) \d+)( (-|или(| [во]))( \d+)) (веке|в\.)', r'\1-м\3-м веке'),
  (r'(([Вв]|[Оо]) \d+)( (-|и(| [во])) \d+) (веках|вв\.)', r'\1-м\3-м веках'),
  (r'\b(([Вв]|[Оо]) \d+) (веке|в\.)', r'\1-м веке'),
  (r'\b([Кк] \d+)(|-му) (веку|в\.)', r'\1-му веку'),
  (r'\b([Дд]о|[Нн]е позднее|[Нн]е ранее|[Оо]коло|[Пп]осле|[Сс])( \d+) (века|в\.)', r'\1\2-го века'),
  (r'\b(\d+)( [-и] \d+) веков', r'\1-го\2-го веков'),
  (r'\b([Кк] \d+)( - \d+) (векам|вв\.)', r'\1-му\2-му векам'),
  (r'(([Нн]а протяжении|[Вв] (начале|середине|конце|течение)|[Кк] (началу|середине|концу)|([Дд]о|[Сс]) (начала|середины|конца)) \d+) в\.', r'\1-го века'),
  (r'(([Вв] течение|[Нн]а протяжении) \d+)( - \d+) вв\.', r'\1-го\3-го веков'),
  (r'\b(\d+)( - \d+) (века\b|вв\.)', r'\1-й\2-й века'),
  (r'(начал[аемоу]{1,2}|кон[аемоуц]{2,3}|середин[аейоуы]{1,2}|половин[аейоуы]{1,2}) (\d+) в\.', r'\1 \2-го века'),
  (r'( \d+)( века)\b', r'\1-го\2'),
  (r'\b(\d+) (век\b|в\.)', r'\1-й век'),

  (r'\b([Нн]ачал[аеому]{1,2}|[Сс]ередин[аеойуы]{1,2}|[Кк]он[ецауом]{2,3}|половин[аеуыой]{1,2})( \d+\b)(?!-х|-го)', r'\1\2-го'),

  (r'\b([Оо]б? \d+) г\.', r'\1 годе'),
  (r'\b([Вв] \d+)(((, (а|но) не в)| или(| в)| -) \d+) (году|г\.)', r'\1-м\2-м году'),
  (r'\b([Кк] \d+)( (-|или) \d+) (году|г\.)', r'\1-му\2-му году'),
  (r'\b([Вв] ([а-яё]+[ео]м[,]? |том же |)\d+) (году|г\.)', r'\1-м году'),
  (r'\b([Кк] ([а-яё]+[ео]му[,]? |)\d+) (году|г\.)', r'\1-му году'),

  (r'([Нн]ачиная с \d+)( и заканчивая \d+ годом)', r'\1-го\2'),
  (r'(([Мм]ежду|[Пп]о сравнению с) \d+ [-и] \d+) гг\.', r'\1 годами'),
  (r'(([Мм]ежду|[Пп]о сравнению с) \d+ [-и] \d+) г\.', r'\1 годом'),
  (r'([Пп]о сравнению с|[Пп]еред)( \d+) г\.', r'\1\2-м годом'),

  (r'\b([Вв] \d+)((,(| в)| -| и(| в)) \d+) (годах|гг\.)', r'\1-м\2-м годах'),
  (r'\b([Вв] \d+)(, \d+)((,| и) \d+) (годах|гг\.)', r'\1-м\2-м\3-м годах'),
  (r'([Оо]коло \d+)( - \d+) гг\.', r'\1-го\2-го годов'),

  (r'\b([Вв] \d+0)(|-х) (годах|гг\.)', r'\1-х годах'),
  (r'\b([Дд]о|[Пп]осле|[Сс])( \d+) (годов|гг\.)', r'\1\2-х годов'),
  (r'\b([Сс] \d+)( по \d+)( год[ы]?)\b', r'\1-го\2-й\3'),
  (r'\b([Сс] \d+)( до \d+) г\.', r'\1-го\2-го года'),
  (r'\b([Сс] \d+)( по \d+) г\.', r'\1-го\2-й год'),
  (r'\b([Сс] \d+)( по \d+) гг\.', r'\1-го\2-й годы'),
  (r'\b([Сс] \d+)( на \d+) (год\b|г\.)', r'\1-го\2-й год'),

  (r'\b([Дд]о|[Нн]е позднее|[Нн]е ранее|[Оо]коло|[Пп]осле|[Сс])( \d+) (года\b|г\.)', r'\1\2-го года'),
  (r'\b([Дд]о|[Нн]е позднее|[Нн]е ранее|[Оо]коло|[Пп]осле|[Сс])( \d+)( (-|или) \d+) (года\b|г\.)', r'\1\2-го\3-го года'),
  (r'\b([Дд]о|[Нн]е позднее|[Нн]е ранее|[Оо]коло|[Пп]осле|[Сс])( \d+)( - \d+) (годов\b|гг\.)', r'\1\2-го\3-го годов'),
  (r'(\d+)( (или|и|-) \d+) (годы|гг\.)', r'\1-й\2-й годы'),
  (r'\b(\d\d)\.(\d\d)\.(\d+)\b', r'\1-го \2-го \3-го'),

  (r'([Зз]им[аеойуы]{1,2} \d+)( - \d+)', r'\1-го\2-го'),

  (r'([Вв]о? [1-4])( (-|и( в|)) [1-4])( кварталах)', r'\1-м\2-м\5'),
  (r'([Вв]о? [1-4])( (-|или( в|)) [1-4])( квартале)', r'\1-м\2-м\5'),
  (r'\b([Сс]о? [1-4])( по [1-4] квартал)', r'\1-го\2'),
  (r'([1-4])( квартал[ы]?)\b', r'\1-й\2'),
  (r'([1-4])( квартала)\b', r'\1-го\2'),
  (r'([1-4])( кварталу)\b', r'\1-му\2'),
  (r'([1-4])( квартал)(е|ом)\b', r'\1-м\2\3'),
  (r'квартал(|а[х]?|ам[и]?|е|ом|у|ы)( \d+) г\.', r'квартал\1\2 года'),

  (r'\b([Дд]о|[Кк]о?|[Пп]осле|[Сс]о?)( \d+)( недел)(е|ей|и)\b', r'\1\2-й\3\4'),
  (r'\b(([Дд]о|[Пп]осле|[Сс]|ранее|позднее) \d+)( числа)\b', r'\1-го\3'),
  (r'\b([Кк] \d+)( числу)\b', r'\1-му\2'),

  (r'\b([Оо]т \d+) г\.', r'\1-го года'),
  (r'(\d+-го )г\.', r'\1года'),
  (r'([Сс] \d+)-м г\.', r'\1 годом'),
  (r'(\d+0)( (-|и|или) \d+0-е) (гг\.|годы)', r'\1-е\2 годы'),
  (r'(\d+0)(|-е) гг\.', r'\1-е годы'),
  (r'(\d+0-ми )гг\.', r'\1годами'),
  (r'(\d+0-х )гг\.', r'\1годов'),
  (r'\b([Кк] \d{3,4})( (-|или) \d{3,4})( годам)\b', r'\1-му\2-му\4'),

  (r'(\d+) г\.р\.', r'\1-го года рождения'),

  (r'\b(\d+)( годом)', r'\1-м\2'),
#  (r'(1\d|[02-9][05-9]|\b[5-9]) года\b', r'\1-го года'),
  (r'\b((1\d|20)\d\d) года\b', r'\1-го года'),
  (r'(1\d|[02-9][02-9]|\b[2-9])(| [а-яё]+[иы]й) год\b', r'\1-й\2 год'),
  (r'\b((1\d|20)\d\d)((| [а-яё]+[иы]й) год)\b', r'\1-й\3'), # Спорный шаблон
  (r'(\d+)(|-й) г\.', r'\1-й год'),
  (r'(\d+)( - \d+-й)', r'\1-й\2'),

  (r'\b(\d+) (и|или|-) (\d+)-(го|ми|му|х|ю|я)\b', r'\1-\4 \2 \3-\4'),
  (r'\b(\d+)(?=(, \d+)*, \d+-(го|ми|му|х|ю|я))', r'\1-\3'),

  (r'(\d)( ранга)\b', r'\1-го\2'),
  (r'([Пп]ункт(|а|е|у|ом)|[Сс]тать(я|е|ю|и|ей)) (?=\d+ )', r'\1_'),

  (r'\b([Сс]о? \d+)( по \d+) ((тысяче|сто)летие|поколение)\b', r'\1-го\2-е \3'),
  (r'\b([Вв]о? \d+)( [-и] \d+) ((тысяче|сто)летиях|поколениях)', r'\1-м\2-м \3')
)
patterns = (
  # Римские цифры
  (r'(Александр|Иван|Иоанн|Пав[е]?л|П[её]тр|Ф[её]дор|Васили|Лжедмитри|Никола|Карл|Людовик)(|а|е|ем|й|ом|у|ю|я) ([IVX]+)\b', 'm.group(1) + m.group(2) + " " + ordinal(roman2arabic(m.group(3)), mu_pad[m.group(2)])'),
  (r'(Анн|Екатерин)(|а|е|ой|у|ы) ([IVX]+)', 'm.group(1) + m.group(2) + " " + ordinal(roman2arabic(m.group(3)), zh_pad[m.group(2)])'),
  (r'\b([IVXCDM]+)( [А-Я]?[а-яё]+([иы]([ейх]|ми?)|[ая]я|[ео](му?|го|[ей])|[ую]ю))\b', 'ordinal(roman2arabic(m.group(1)), adj_pad[m.group(3)]) + m.group(2)'),
  (r'\b([A-Z][a-z]*[ -]|[А-Я][а-я]*[ -])([IVX]+)($|\n|[.,;:]| [^a-z])', 'm.group(1) + roman2arabic(m.group(2)) + m.group(3)'),
  (r'\b([IV]+) степени', 'ordinal(roman2arabic(m.group(1)), r_zh) + " степени"'),
  (r'\b([IV]+) (класс|ранг|тип)(|а|е|у|ом)\b', 'ordinal(roman2arabic(m.group(1)), mu_pad[m.group(3)]) + " " + m.group(2) + m.group(3)'),
  # Порядковые числительные - даты и т. д.
  (r'\b(\d+)( класс(|а|е|ом|у))\b', 'ordinal(m.group(1), mu_pad[m.group(3)]) + m.group(2)'),
  (r'(\d+)( зимни[еимх]{1,2}| летни[еимх]{1,2}|)( Олимпийски)(е|ми|м\b|х)\b', 'ordinal(m.group(1), mn_pad[m.group(4)]) + m.group(2) + m.group(3) + m.group(4)'),
  (r'(\d+)( этаж(а|е|у|ом|))', 'ordinal(m.group(1), mu_pad[m.group(3)]) + m.group(2)'),
  (r'(\d+0)( - \d+0-е годы)', 'ordinal(m.group(1), i_mn) + m.group(2)'),
  (r'(\d+0)-е( годы)', 'ordinal(m.group(1), i_mn) + m.group(2)'),
  (r'([Кк] )(\d+0)-м\b', 'm.group(1) + ordinal(m.group(2), d_mn)'),
  (r'(\d+)( [-и] )(\d+) ((тысяче|сто)летия|поколения)\b', 'ordinal(m.group(1), i_sr) + m.group(2) + ordinal(m.group(3), i_sr) + " " + m.group(4)'),
  (r'(\d+)( ((тысяче|сто)лети|поколени)(е|и|ем|ю|я))\b', 'ordinal(m.group(1), sr_pad[m.group(5)]) + m.group(2)'),
  (r'(\d+)( [Сс]ъезд)(|а|е|ом|у)\b', 'ordinal(m.group(1), mu_pad[m.group(3)]) + m.group(2) + m.group(3)'),
  (r'([Вв] )(\d+0)-е\b', 'm.group(1) + ordinal(m.group(2), i_mn)'),
  (r'(\d+)-е(?! [а-яё]+[аиы])\b', 'ordinal(m.group(1), i_sr)'), # Тестовый шаблон
  (r'(\d+0)( - \d+0-м годам)', 'ordinal(m.group(1), d_mn) + m.group(2)'),
  (r'(\d+0)-м( годам| числам)\b', 'ordinal(m.group(1), t_mu) + m.group(2)'),
  (r'(\d+)-ы?х ?-', 'ordinal(m.group(1), r_mn) + " "'),
  (r'\b([Вв]о? |[Нн]а |[Сс]квозь |[Чч]ерез )(\d+)-ю\b', 'm.group(1) + ordinal(m.group(2), v_zh)'),
  (r'\b([Вв]о? |[Нн]а |[Оо]б? |[Пп]ри )(\d+)(|-м)( ?- ?| или | и )(\d+)-м\b', 'm.group(1) + ordinal(m.group(2), p_mu) + m.group(4) + ordinal(m.group(5), p_mu)'),
  (r'\b(([Вв]о?|[Нн]а|[Оо]б?|[Пп]ри) \d+-м, )(\d+)-м\b', 'm.group(1) + ordinal(m.group(3), p_mu)'),
  (r'\b([Вв]о?|[Нн]а|[Оо]б?|[Пп]ри)( [а-яё]+[ео]м | )(\d+)-м\b', 'm.group(1) + m.group(2) + ordinal(m.group(3), p_mu)'),
  (r'\b([Сс] )(\d+)-м\b', 'm.group(1) + ordinal(m.group(2), t_mu)'),
  (r'(\d+)-му\b', 'ordinal(m.group(1), d_mu)'),
  (r'(\d+)-го\b', 'ordinal(m.group(1), r_mu)'),
  (r'(\d+)-ми\b', 'ordinal(m.group(1), t_mn)'),
  (r'\b(\d*1\d|\d*[02-9][015-9]|[015-9])-ы?х\b', 'ordinal(m.group(1), r_mn)'),
  (r'\b([Дд]о|[Пп]осле|[Сс]о?) (\d+)-й\b', 'm.group(1) + " " + ordinal(m.group(2), r_zh)'),
  (r'(\d+)( [-и] )(\d+)( годами| веками| (сто|тысяче)летиями)', 'ordinal(m.group(1), t_mu) + m.group(2) + ordinal(m.group(3), t_mu) + m.group(4)'),
  (r'(\d+)-м (год(у|ах)|век(е|ах)|(сто|тысяче)лети(и|ях))', 'ordinal(m.group(1), p_mu) + " " + m.group(2)'),
  (r'(\d+)-м( [а-яА-Я]+[иы]м)\b', 'ordinal(m.group(1), t_mu) + m.group(2)'),
  (r'(\d+)-м( [а-яА-Я]+[ео]м)\b', 'ordinal(m.group(1), p_mu) + m.group(2)'),
  (r'(\d+)-я\b', 'ordinal(m.group(1), i_zh)'),
  (r'(\d+)-ю\b', 'ordinal(m.group(1), v_zh)'),
  (r'(\d+)-й\b', 'ordinal(m.group(1), i_mu)'),
  (r'(\d+)( годовщин([аейоуы]{1,2}))\b', 'ordinal(m.group(1), zh_pad[m.group(3)]) + m.group(2)'),
  (r'([Мм]ежду |[Пп]о сравнению с )(\d+)( - | и )(\d+)( годами| годом)\b', 'm.group(1) + ordinal(m.group(2), t_mu) + m.group(3) + ordinal(m.group(4), t_mu) + m.group(5)'),
  (r'(\d+)-е' + months, 'ordinal(m.group(1), i_sr) + " " + m.group(2)'),
  (r'([Мм]ежду )(\d+)' + months + '( и )(\d+)' + months, 'm.group(1) + ordinal(m.group(2), t_mu) + " " + m.group(3) + m.group(4) + ordinal(m.group(5), t_mu) + " " + m.group(6)'),
  (r'([Мм]ежду )(\d+) и (\d+)' + months, 'm.group(1) + ordinal(m.group(2), t_mu) + " и " + ordinal(m.group(3), t_mu) + " " + m.group(4)'),
  (r'(датир(ован[а,о,ы]?|у[еюмтся]{1,4}) )(\d+)' + months, 'm.group(1) + ordinal(m.group(3), t_mu) + " " + m.group(4)'),
  (r'\b(\d+)' + months, 'ordinal(m.group(1), r_mu) + " " + m.group(2)'),
  (r'\b(\d+)-[еи] сутки', 'ordinal(m.group(1), i_mn) + " сутки"'),
  # Десятичные дроби
  (r'\b([Пп]о сравнению с |[Вв]ладе[авеийлмтюшщья]{1,7} )(\d+),(\d+)\b', 'm.group(1) + fraction(m.group(2), m.group(3), 3)'),
  (r'\b([Кк] |рав[аеоын]{2} |равня[аеилостья]{3,4} )(\d+),(\d+)\b', 'm.group(1) + fraction(m.group(2), m.group(3), 2)'),
  (r'\b([Оо]б? |[Пп]ри )(\d+),(\d+)\b', 'm.group(1) + fraction(m.group(2), m.group(3), 4)'),
  (r'\b([Вв] )(\d+),(\d+) раза\b', 'm.group(1) + fraction(m.group(2), m.group(3), 5) + " раза"'),
  (r'\b([Вв] )(\d+),(\d+) - (\d+),(\d+) раза\b', 'm.group(1) + fraction(m.group(2), m.group(3), 5) + " - " + fraction(m.group(4), m.group(5), 5) + " раза"'),
  (r'\b([Дд]иаметр[аеуом]{,2}|[Рр]азниц[аейуы]{1,2}|[Вв]ысот[аейоуы]{1,2}|[Гг]лубин[аейоуы]{1,2}|[Дд]альност[иью]{1,2}|[Дд]альност[иью]{1,2} стрельбы|[Дд]истанци[яюией]{1,2}|[Дд]лин[аейоуы]{1,2}|[Мм]асс[аейоуы]{1,2}|[Шш]ирин[аейоуы]{1,2}|[Вв]ес[аемоу]{,2}|[Мм]ощност[иью]{1,2}|[Сс]корост[иью]{1,2}|[Сс]тоимост[иью]{1,2}|[Рр]асстояни[еимхюя]{1,2}|[Дд]лительност[иью]{1,2}|[Пп]родолжительност[иью]{1,2}|оцени[авеийлмстшыьюя]{,6}|[Уу]далени[еимюя]{1,2}) в (\d+),(\d+)\b', 'm.group(1) + " в " + fraction(m.group(2), m.group(3), 5)'),
  (r'\b([Вв] )(\d+),(\d+)\b', 'm.group(1) + fraction(m.group(2), m.group(3), 4)'),
  (r'\b([Зз]а |состав[аеилотя]{2,4} )(\d+),(\d+)\b', 'm.group(1) + fraction(m.group(2), m.group(3), 5)'),
  # Наращения при количественных числительных недопустимы, но распространены
  (r'\b(\d*[1-9]0|\d*1\d|\d*[02-9]?[569])-[т]?и\b', 'cardinal(m.group(1), r_ca)'),
  (r'\b(\d*[02-9]?[234])-х\b', 'cardinal(m.group(1), r_ca)'),
  (r'(\d+)-ю ([а-яё]+ми)\b', 'cardinal(m.group(1), t_ca) + " " + m.group(2)'),
  (r'\b([Сс]о? )(\d*1[0-4]|\d*\d[5-9]|[5-9])-ю\b', 'm.group(1) + cardinal(m.group(2), t_ca)')
)

greekletters = 'ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσΤτΥυΦφΧχΨψΩως'
letternames = ('альфа', 'бета', 'гамма', 'дельта', 'эпсилон', 'дзета', 'эта',
               'тета', 'йота', 'каппа', 'лямбда', 'мю', 'ню', 'кси',
               'омикрон', 'пи', 'ро', 'сигма', 'тау', 'ипсилон', 'фи', 'хи',
               'пси', 'омега', 'сигма')

def condition(value):
    """
    Оканчивается ли число на "1", но не на "11"?
    (value - число в формате строки)
    """
    if value == '1' or (len(value) > 1 and value[-2] != '1' and value[-1] == '1'):
        return True
    else:
        return False

def cardinal(num, casus):
    """
    Склонение количественного числительного.
    (num - число, casus - падеж)
    """
    rem = len(num) % 3
    if rem != 0: num = '0' * (3 - rem) + num
    c_num = ''
    triple = len(num) // 3
    for t in range(triple):
        number = num[:3]
        num = num[3:]

        t_num = ''
        if number[2] != '0':
            if number[1] == '1':
                t_num = casus[int(number[2])][1]
            else:
                t_num = casus[int(number[2])][0]
                if number[1] != '0':
                    t_num = casus[0][int(number[1])] + ' ' + t_num
            if number[0] != '0':
                t_num = casus[0][0][int(number[0])] + ' ' + t_num
        else:
            if number[1] != '0':
                t_num = casus[0][int(number[1])]
            if number[0] != '0':
                if t_num == '':
                    t_num = casus[0][0][int(number[0])]
                else:
                    t_num = casus[0][0][int(number[0])] + ' ' + t_num

        if c_num and t_num:
             c_num += ' ' + t_num
        else:
             c_num += t_num
        if t_num and len(num) != 0:
            if number[2] == '1' and number[1] != '1':
                n = 0
            else:
                n = 1
            c_num = c_num + ' ' + casus[0][0][0][triple - t - 1][n]

    c_num = sub(r'одн(им|ого|ому|ом) тысяч(ей|е|и)', r'одной тысяч\2', c_num)
    if c_num == '': c_num = casus[0][0][0][0]
    if casus[0][0][0][0] == 'ноль':
        c_num = sub(r'(два|три|четыре) (миллион|миллиард|триллион|квадриллион|квинтиллион|секстиллион|септиллион|октиллион)ов', r'\1 \2а', c_num)
        c_num = sub('один тысячу', 'одну тысячу', c_num)
        c_num = sub('два тысяч', 'две тысячи', c_num)
        c_num = sub(r'((три|четыре) тысяч)', r'\1и', c_num)

    return c_num

def ordinal(num, casus):
    """
    Склонение порядковых числительных.
    (num - число, casus - падеж)
    """
    if num[-1] == '0':
        try:
            if num[-2] == '0':
                if num[-3] == '0':
                    prenum = ''
                    number = casus[0][0][0][int(num[-4])]
                else:
                    if len(num) == 3:
                        prenum = ''
                    else:
                        prenum = num[:-3]
                        if int(prenum) != 0: prenum += '000_'
                    number = casus[0][0][int(num[-3])]
            else:
                if len(num) == 2:
                    prenum = ''
                else:
                    prenum = num[:-2]
                    if int(prenum) != 0: prenum += '00_'
                number = casus[0][int(num[-2])]
        except:
            prenum = ''
            number = casus[0][0][0][0]
    else:
        if len(num) == 1:
            prenum = ''
            dec = 0
        else:
            if num[-2] == '1':
                dec = 1
                if len(num) == 2:
                    prenum = ''
                else:
                    prenum = num[:-2]
                    if int(prenum) != 0: prenum += '00_'
            else:
                prenum = num[:-1]
                if int(prenum) != 0: prenum += '0_'
                dec = 0
        number = casus[int(num[-1])][dec]
    return prenum + number

# Преобразование римских цифр в арабские
# Код заимствован (с изменениями) у Jeff Wheeler
values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
def roman2arabic(value):
    total = 0
    prevValue = 0
    value = value[::-1]
    for char in value:
        if values[char] >= prevValue:
            total += values[char]
        else:
            total -= values[char]
        prevValue = values[char]
    total = str(total)
    return total


def substant(num, key, cas = 0):
    """
    Чтение единиц измерения
    num - число, key - обозначение единицы измерения,
    cas - падеж (0 - именительный, 1 - родительный, 2 - дательный,
                 3 - творительный, 4 - предложный, 5 - винительный)
    """
    if len (num) > 3 and num[-3:] == '000':
        form = forms[key][1]
    else:
        if cas == 0:
            if len(num) > 1 and num[-2] == '1':
                form = forms[key][1]
            else:
                if num[-1] == '1':
                    form = forms[key][0]
                elif 1 < int(num[-1]) < 5:
                    form = forms[key][10]
                else:
                    form = forms[key][1]
        elif cas == 5:
            if key in zh_units:

                if condition(num):
                    form = {'т': 'тонну', 'а.е.': 'астрономическую единицу', 'л.с.': 'лошадиную силу', 'сек': 'секунду', "'": 'минуту', 'ед.': 'единицу', 'шт.': 'штуку'}[key]
                elif num in '234' or (len(num) > 1 and num[-2] != '1' and num[-1] in '234'):
                    form = forms[key][2]
                else:
                    form = forms[key][1]
            else:
                if (len(num) > 1 and num[-2] != '1' and num[-1] in '234') or num[-1] in '234':
                    form = forms[key][2]
                elif (len(num) > 1 and num[-2] == '1') or num[-1] != '1':
                    form = forms[key][1]
                else:
                    form = forms[key][0]
        else:
            if (len(num) > 1 and num[-2] == '1') or num[-1] != '1':
                form = forms[key][2 * cas + 1]
            else:
                form = forms[key][2 * cas]
    return form

def feminin(num):
    """
    Форма женского рода количественного числительного в им. пад.
    """
    try:
        if num[-2] != '1':
            pre = num[:-1]
            if int(pre) != 0:
                pre = num[:-1] + '0'
            if num[-1] == '1':
                num = pre + '_одна'
            elif num[-1] == '2':
                num = pre + '_две'
    except:
        if num == '1':
            num = 'одна'
        elif num == '2':
            num = 'две'
    return num

def daynight(num, nom):
    """
    Счёт суток.
    (num - число, nom - существительное)
    """
    number = num
    if nom == 'сутки':
        if number == '1':
            number = 'одни'
        elif len(num) > 1 and num[-2] != '1' and num[-1] == '1':
            number = num[:-1] + '0_одни'
    else:
        if num == '2':
            number = 'двое'
        elif num == '3':
            number = 'трое'
        elif num == '4':
            number = 'четверо'
        elif len(num) > 1 and num[-2] != '1':
            if 5 > int(num[-1]) > 0:
                number = cardinal(num, r_ca)
                if number[-6:] == 'одного':
                    number = number[:-3] + 'их'
    return number

def fraction(full, frac, cas = 0):
    """
    Чтение десятичных дробей до миллионных включительно.
    (full - целая часть, frac - дробная часть, cas - падеж)
    """
    try:
        dec = ' ' + ('десят', 'сот', 'тысячн', 'десятитысячн',
                     'стотысячн', 'миллионн')[len(frac) - 1]
    except:
        dec = ' запятая'
        for t in range(len(frac)):
            dec += ', ' + frac[t]
        return full + dec
    f_part = feminin(full)
    if f_part[-1] == 'а': fp = 'ая'
    else: fp = 'ых'
    d_part = feminin(frac)
    if d_part[-1] == 'а': dp = 'ая'
    else: dp = 'ых'
    if cas == 1:
        f_part = cardinal(full, r_ca)
        if condition(full):
            f_part = f_part[:-2] + 'й'
            fp = 'ой'
        else:
            fp = 'ых'
        d_part = cardinal(frac, r_ca)
        if condition(frac):
            d_part = d_part[:-2] + 'й'
            dp = 'ой'
        else:
            dp = 'ых'
    if cas == 2:
        f_part = cardinal(full, d_ca)
        if condition(full):
            f_part = f_part[:-2] + 'й'
            fp = 'ой'
        elif f_part == 'нолю':
            fp = 'ых'
        else:
            fp = 'ым'
        d_part = cardinal(frac, d_ca)
        if condition(frac):
            d_part = d_part[:-2] + 'й'
            dp = 'ой'
        elif d_part == 'нолю':
            dp = 'ых'
        else:
            dp = 'ым'
    if cas == 3:
        f_part = cardinal(full, t_ca)
        if condition(full):
            f_part = f_part[:-2] + 'ой'
            fp = 'ой'
        elif f_part == 'нолём':
            fp = 'ых'
        else:
            fp = 'ыми'
        d_part = cardinal(frac, t_ca)
        if condition(frac):
            d_part = d_part[:-2] + 'ой'
            dp = 'ой'
        elif d_part == 'нолём':
            dp = 'ых'
        else:
            dp = 'ыми'
    if cas == 4:
        f_part = cardinal(full, p_ca)
        if condition(full):
            f_part = f_part[:-1] + 'й'
            fp = 'ой'
        elif f_part == 'ноле':
            fp = 'ых'
        else:
            fp = 'ых'
        d_part = cardinal(frac, p_ca)
        if condition(frac):
            d_part = d_part[:-1] + 'й'
            dp = 'ой'
        else:
            dp = 'ых'
    if cas == 5:
        if f_part[-1] == 'а':
            f_part = f_part[:-1] + 'у'
            fp = 'ую'
        else:
            fp = 'ых'
        if d_part[-1] == 'а':
            d_part = d_part[:-1] + 'у'
            dp = 'ую'
        else:
            dp = 'ых'
    return f_part + ' цел' + fp + ' ' + d_part + dec + dp

def txt_prep(text):
    """
    =================================
    Основная функция обработки текста
    =================================
    """

    for sample in presamples:
        text = sub(sample[0], sample[1], text)

    # Единицы измерения

    # Винительный падеж
    for m in finditer(r'\b([Дд]иаметр[аеуом]{,2}|[Рр]азниц[аейуы]{1,2}|[Вв]ысот[аейоуы]{1,2}|[Гг]лубин[аейоуы]{1,2}|[Дд]альност[иью]{1,2}|[Дд]альност[иью]{1,2} стрельбы|[Дд]истанци[яюией]{1,2}|[Дд]лин[аейоуы]{1,2}|[Мм]асс[аейоуы]{1,2}|[Шш]ирин[аейоуы]{1,2}|[Вв]ес[аемоу]{,2}|[Мм]ощност[иью]{1,2}|[Пп]лощад[иью]{1,2}|[Сс]корост[иью]{1,2}|[Сс]тоимост[иью]{1,2}|[Рр]асстояни[еимхюя]{1,2}|[Дд]лительност[иью]{1,2}|[Пп]родолжительност[иью]{1,2}|оцени[авеийлмстшыья]{,6}|[Уу]далени[еимюя]{1,2}) в( (\d+,|)(\d+) - | )(\d+,|)(\d+)_' + units, text):
        if m.group(2) == ' ':
            number = ''
        else:
            if m.group(3):
                number = fraction(m.group(3)[:-1], m.group(4), 5)
            else:
                if condition(m.group(4)) and m.group(7) in zh_units:
                    number = feminin(m.group(4))[:-1] + 'у'
                else:
                    number = m.group(4)
            number = number + ' - '
        if m.group(5):
            number += fraction(m.group(5)[:-1], m.group(6), 5) + ' ' + forms[m.group(7)][2]
        else:
            number += m.group(6) + ' ' + substant(m.group(6), m.group(7), 5)
        text = text.replace(m.group(), m.group(1) + ' в ' + number, 1)

    # Родительный падеж
    for m in finditer(r'\b([Сс] (почти |примерно |приблизительно |плюс |минус |))(\d+)_' + units + ' до ', text):
        text = text.replace(m.group(), m.group(1) + m.group(3) + ' ' + substant(m.group(3), m.group(4), 1) + ' до ', 1)
    for m in finditer(r'\b([Оо]т |[Сс]о? )(\d+,|)(\d+)( до (\d+,|)\d+_)' + units, text):
        if m.group(2) != '':
            number = fraction(m.group(2)[:-1], m.group(3), 1)
        else:
            number = cardinal(m.group(3), r_ca)
            if m.group(6) in zh_units:
                number = number[:-2] + 'й'
        text = text.replace(m.group(), m.group(1) + number + m.group(4) + m.group(6), 1)
    for m in finditer(r'\b([Бб]олее|[Мм]енее|[Бб]ольше|[Мм]еньше|[Вв]ыше|[Нн]иже|[Оо]коло|[Сс]выше|[Дд]ля|[Дд]о|[Ии]з|[Оо]т|[Вв]место|[Вв] размере|[Вв] течение|[Нн]ач[инаетсялоь]{2,7} с|[Вв]ладел[аеимухцыь]{2,5}|[Дд]остиг[авеийлнотшщюуья]{,5}|[Пп]ротив|[Пп]орядка|[Пп]осле)( плюс | минус | )((\d+,|)(\d+)( - | или | и )(плюс |минус |)|)(\d+,|)(\d+)_' + units, text):
        if m.group(3):
            if m.group(4):
                prenum = fraction(m.group(4)[:-1], m.group(5), 1)
            else:
                prenum = cardinal(m.group(5), r_ca)
                if condition(m.group(5)) and m.group(10) in zh_units:
                    prenum = prenum[:-2] + 'й'
                prenum += m.group(6) + m.group(7)
        else:
            prenum = ''
        if m.group(8):
            number = fraction(m.group(8)[:-1], m.group(9), 1) + ' ' + forms[m.group(10)][2]
        else:
            number = m.group(9) + ' ' + substant(m.group(9), m.group(10), 1)
        text = text.replace(m.group(), m.group(1) + m.group(2) + prenum  + number, 1)

    # Дательный падеж
    for m in finditer(r'\b(([Кк]|рав[нагеийлмоcуюыхья]{2,6})( почти | примерно | приблизительно | плюс | минус | ))(\d+,|)(\d+)_' + units, text):
        if m.group(4):
            number = fraction(m.group(4)[:-1], m.group(5), 2) + ' ' + forms[m.group(6)][2]
        else:
            number = m.group(5) + ' ' + substant(m.group(5), m.group(6), 2)
        text = text.replace(m.group(), m.group(1) + number, 1)

    # Творительный падеж
    for m in finditer(r'\b(([Сс]|[Вв]ладе[авеийлмтюшщья]{1,7})( почти | приблизительно | примерно | плюс | минус | ))(\d+,|)(\d+)_' + units, text):
        if m.group(4):
            number = fraction(m.group(4)[:-1], m.group(5), 3) + ' ' + forms[m.group(6)][2]
        else:
            number = m.group(5) + ' ' + substant(m.group(5), m.group(6), 3)
        text = text.replace(m.group(), m.group(1) + number, 1)
    for m in finditer(r'([Мм]ежду( почти | приблизительно | примерно | плюс | минус | ))(\d+,|)(\d+)( и( почти | приблизительно | примерно | плюс | минус | ))(\d+,|)(\d+)_' + units, text):
        if m.group(3):
            prenum = fraction(m.group(3)[:-1], m.group(4), 3)
        else:
            prenum = cardinal(m.group(4), t_ca)
            if condition(m.group(4)) and m.group(9) in zh_units:
                prenum = prenum[:-2] + 'ой'
        if m.group(7):
            number = fraction(m.group(7)[:-1], m.group(8), 3) + ' ' + forms[m.group(9)][2]
        else:
            number = m.group(8) + ' ' + substant(m.group(8), m.group(9), 3)
        text = text.replace(m.group(), m.group(1) + prenum + m.group(5) + number, 1)

    # Предложный падеж
    for m in finditer(r'\b([Вв]|[Оо]б?|[Пп]ри)(( плюс | минус | )(\d+,|)(\d+)( [-и] | или )| )(почти |примерно |приблизительно |плюс |минус |)(\d+,|)(\d+)_' + units, text):
        if m.group(2) == ' ':
            pre = ' '
        else:
            if m.group(4):
                pre = fraction(m.group(4)[:-1], m.group(5), 4) + ' ' + forms[m.group(10)][2]
            else:
                pre = m.group(5)
            pre = m.group(3) + pre + m.group(6)
        number = m.group(7)
        if m.group(8):
            number += fraction(m.group(8)[:-1], m.group(9), 4) + ' ' + forms[m.group(10)][2]
        else:
            number += m.group(9) + ' ' + substant(m.group(9), m.group(10), 4)
        text = text.replace(m.group(), m.group(1) + pre + number, 1)

    # Предлог "по" при указании количества
    for m in finditer(r'\b([Пп]о )(\d*[02-9]1|1)_' + units, text):
        new = m.group(1) + m.group(2) + ' ' + substant(m.group(2), m.group(3), 2)
        text = text.replace(m.group(), new, 1)

    # Именительный
    for m in finditer(r'\b(\d+,\d+)_' + units, text):
        new = m.group(1) + ' ' + forms[m.group(2)][2]
        text = text.replace(m.group(), new, 1)
    for m in finditer(r'\b(\d+)_' + units, text):
        new = m.group(1) + ' ' + substant(m.group(1), m.group(2))
        text = text.replace(m.group(), new, 1)

    for m in finditer(r'(тысяч[аимх]{,3}|(миллион|миллиард|триллион)(|ам?|ами|ов)) ' + units, text):
        new = m.group(1) + ' ' + forms[m.group(4)][1]
        text = text.replace(m.group(), new, 1)

    # Время в формате (h)h ч (m)m мин
    for m in finditer(r'\b(\d{1,2}) ?ч ?(\d{1,2}) ?мин\b', text):
        if condition(m.group(1)): hours = ' час '
        elif m.group(1)[-1] in ('2', '3', '4'): hours = ' часа '
        else: hours = ' часов '
        if condition(m.group(2)): minutes = ' минута'
        elif m.group(2)[-1] in ('2', '3', '4'): minutes = ' минуты'
        else: minutes = ' минут'
        new = m.group(1) + hours + feminin(m.group(2)) + minutes
        text = text.replace(m.group(), new, 1)

    # Время в формате (ч)ч:мм/(ч)ч.мм

    for m in finditer(r'\b(([Вв]|[Нн]а) \d{1,2})[:.](\d\d)\b', text):
        minutes = feminin(m.group(3))
        if minutes[-2:] == 'на':
            minutes = minutes[:-1] + 'у'
        text = text.replace(m.group(), m.group(1) + ' ' + minutes, 1)

    for m in finditer(r'\b([Кк] )(\d{1,2})[:.](\d\d)\b', text):
        hours = cardinal(m.group(2), d_ca)
        minutes = cardinal(m.group(3), d_ca)
        if minutes[-2:] == 'му':
            minutes = minutes[:-2] + 'й'
        if m.group(3) == '00':
            minutes = '00'
        elif m.group(3)[0] == '0':
            minutes = '0_' + minutes
        text = text.replace(m.group(), m.group(1) + hours + ' ' + minutes, 1)

    for m in finditer(r'\b([Дд]о |[Пп]осле |[Оо]коло |[Сс] )(\d{1,2})[:.](\d\d)\b', text):
        hours = cardinal(m.group(2), r_ca)
        minutes = cardinal(m.group(3), r_ca)
        if minutes[-2:] == 'го':
            minutes = minutes[:-2] + 'й'
        if m.group(3) == '00':
            minutes = '00'
        elif m.group(3)[0] == '0':
            minutes = '0_' + minutes
        text = text.replace(m.group(), m.group(1) + hours + ' ' + minutes, 1)

    # Порядковые числительные

    for m in finditer(r'\b(([IVXCDLM]+)( ?- ?(начале |середине |конце )| (и|или)( | в ))|)([IVXCDLM]+) ([в]?в\.|век[аеуовмих]{,3}\b|(сто|тысяче)лети[ейяюмих]{1,3}\b|[Сс]ъезд[аеуовмих]{,3}\b|квартал[аеуыовмих]{,3}\b)', text):
        if m.group(1) == '':
            part1 = ''
        else:
            part1 = roman2arabic(m.group(2)) + m.group(3)
        new = part1 + roman2arabic(m.group(7)) + ' ' + m.group(8)
        text = text.replace(m.group(), new, 1)

    for sample in samples:
        text = sub(sample[0], sample[1], text)

    # например: "во 2 окне -> во втором окне"
    for m in finditer(r'\b([Вв]о? |[Оо]б? |[Пп]ри )(\d*[02-9]|\d*1\d) ([а-яё]+)\b', text):
        attr = words.get_attr(m.group(3))
        number = ''
        if attr.have([S_GENDER, M_GENDER], False, [5]):
            number = ordinal(m.group(2), p_mu)
        elif attr.have([Z_GENDER], False, [2, 5]):
            number = ordinal(m.group(2), p_zh)
        if number:
            new = m.group(1) + number + ' ' + m.group(3)
            text = text.replace(m.group(), new, 1)

    # например: "на 8-м этаже -> на восьмом этаже"
    for m in finditer(r'(\d+)-(м|й) ([а-яё]+)\b', text):
        number = ''
        if m.group(2) == 'м':
            attr = words.get_attr(m.group(3))
            if not attr.gender == Z_GENDER:
                if attr.case[4]:
                    number = ordinal(m.group(1), t_mu)
                elif attr.case[5]:
                    number = ordinal(m.group(1), p_mu)
        elif m.group(2) == 'й':
            attr = words.get_attr(m.group(3))
            if attr.have([Z_GENDER], False, None):
                if attr.case[4]:
                    number = ordinal(m.group(1), t_zh)          # t_zh ?
                elif attr.have(case=[2, 5]):
                    number = ordinal(m.group(1), t_zh)          # t_zh ?
        if number:
            text = text.replace(m.group(), number + ' ' + m.group(3), 1)

    for m in finditer(r'(\d+)-е (([а-яё]+[ео]е ){,2}([а-яё]+[ео]))\b', text):
        attr = words.get_attr(m.group(4))
        if attr.have([S_GENDER], False, [0, 3]):
            new = ordinal(m.group(1), i_sr) + ' ' + m.group(2)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'\b(\d*11|\d*[05-9]) ([а-яё]+)\b', text):
        attr = words.get_attr(m.group(2))
        if attr.have([M_GENDER], False, [3]) and not attr.case[0]:
            new = ordinal(m.group(1), r_mu) + ' ' + m.group(2)
            text = text.replace(m.group(), new)

    for m in finditer(r'\b(\d*11|\d*[02-9]) ([а-яё]+)\b', text):
        attr = words.get_attr(m.group(2))
        if attr.have([Z_GENDER], False, [3]):
            new = ordinal(m.group(1), r_mu)[:-3] + 'ую ' + m.group(2)
            text = text.replace(m.group(), new)

#    for m in finditer(r'(\d+)-ю ([а-яё]+)\b', text):
#        attr = words.get_attr(m.group(2))
#        if attr.have([Z_GENDER], False, [3]):
#            new = ordinal(m.group(1), v_zh) + ' ' + m.group(2)
#            text = text.replace(m.group(), new)

    for pattern in patterns:
        for m in finditer(pattern[0], text):
            text = text.replace(m.group(), eval(pattern[1]), 1)

    # Количественные числительные
    for m in finditer(r'\b((\d+) - |)(\d+)-(часов[агеиймоухыюя]{2,3}|(градус|силь|стволь|тон|каналь|странич|тысяч|миллион|миллиард|процент|секунд|минут|месяч|недель|днев|крат|мест|миль|этаж)н[агеиймоухыюя]{2,3}|лет[геиймноухюя]{2,4}|(|кило|милли|санти)(граммов|метров)[агеиймоухыюя]{2,3})\b', text):
        if m.group(1) == '':
            pre = ''
        else:
            if m.group(2)[-3:] == '000':
                pre = cardinal(m.group(2)[:-3], r_ca) + 'тысяче - '
            else:
                pre = cardinal(m.group(2), r_ca) + ' - '
        if m.group(3)[-3:] == '000':
            num = cardinal(m.group(3)[:-3], r_ca) + 'тысяче'
        else:
            num = cardinal(m.group(3), r_ca)
        num = pre + num
        num = sub(r'ста', 'сто', num)
        num = sub(r'(одной тысячи|одноготысяче)', 'тысяче', num)
        num = sub(r'\bодного', 'одно', num)
        text = text.replace(m.group(), num + '-' + m.group(4), 1)

    # Творительный падеж
    for m in finditer(r'((\d+)( - | или | и )|)(плюс |минус |)(\d+) ([а-яё]+([аиыья]ми|[ео]м|[еиоы]й|ью))\b', text):
        if m.group(1):
            pre = cardinal(m.group(2), t_ca)
            if condition(m.group(2)):
                a = words.have(m.group(6), [Z_GENDER], False, [4])
                b = words.have(m.group(6)[:-2], [Z_GENDER], False, [0])
                c = words.have(m.group(6)[:-3] + 'ь', [Z_GENDER], False, [0])
                if a or b or c:
                    pre = pre[:-2] + 'ой'
            pre += m.group(3)
        else:
            pre = ''
        number = ''
        if condition(m.group(5)):
            attr = words.get_attr(m.group(6))
            if attr.have([M_GENDER, S_GENDER], False, [4]):
                number = cardinal(m.group(5), t_ca)
            elif attr.have([Z_GENDER], False, [4]):
                number = cardinal(m.group(5), t_ca)[:-2] + 'ой'
            elif m.group(6) == 'сутками':
                number = cardinal(m.group(5), t_ca) + 'и'
        elif m.group(6)[-2:] == 'ми':
            number = cardinal(m.group(5), t_ca)
        if number:
            new = pre + m.group(4) + number + ' ' + m.group(6)
            text = text.replace(m.group(), new, 1)

    # Предлоги творительного падежа
    for m in finditer(r'\b([Нн]ад|[Пп]еред|[Пп]о сравнению с)( (\d+)( [-и] | или )| )(\d+)\b', text):
        number = ' '
        if m.group(2) != ' ':
            number += cardinal(m.group(3), t_ca) + m.group(4)
        new = m.group(1) + number + cardinal(m.group(5), t_ca)
        text = text.replace(m.group(), new, 1)

    # Родительный падеж
    for m in finditer(r'\b([Оо]т|[Сс])( почти | примерно | приблизительно | плюс | минус | )((\d+,|)(\d+)( [-и] | или )|)(\d+,|)(\d+)( до( почти | примерно | приблизительно | плюс | минус | )((\d+,|)\d+( [-и] | или )|)(\d+,|)\d+( ([а-яё]+([иы]х|[ео]й|[ео]го) |и более |и менее |)([а-яё]+)|))\b', text):
        if m.group(3):
            if m.group(4):
                pre = fraction(m.group(4)[:-1], m.group(5), 1)
            else:
                pre = cardinal(m.group(5), r_ca)
                if pre[-6:] == 'одного' and m.group(18) is not None:
                    attr = words.get_attr(m.group(18))
                    if attr and attr.have([Z_GENDER], None, [1]):
                        pre = pre[:-2] + 'й'
                    elif m.group(18) == 'суток':
                        pre = pre[:-3] + 'их'
            pre += m.group(6)
        else:
            pre = ''
        if m.group(7):
            number = fraction(m.group(7)[:-1], m.group(8), 1)
        else:
            number = cardinal(m.group(8), r_ca)
        if number[-6:] == 'одного' and m.group(18) is not None:
            attr = words.get_attr(m.group(18))
            if attr.have([Z_GENDER], None, [1]):
                number = number[:-2] + 'й'
            elif m.group(18) == 'суток':
                number = number[:-3] + 'их'
        new = m.group(1) + m.group(2) + pre + number + m.group(9)
        text = text.replace(m.group(), new, 1)

    for m in finditer(r'\b([Бб]олее|[Мм]енее|[Бб]ольше|[Мм]еньше|[Вв]ыше|[Нн]иже|[Дд]ороже|[Дд]ешевле|[Оо]коло|[Сс]выше|[Сс]реди|[Дд]ля|[Дд]о|[Ии]з|[Оо]т|[Бб]ез|[Сс]|[Уу]|[Вв]место|[Вв] возрасте|[Вв] размере|[Вв] пределах|[Вв] течение|[Нн]а протяжении|[Нн]ач[инаетялсьо]{2,7} с|[Пп]орядка|[Пп]осле|[Пп]ротив|[Дд]остиг[авеийлнотшщюуья]{,5}|[Вв]ладел[аеимухцыь]{2,5}|[Сс]тарше|[Мм]оложе|не превы[шаеситьло]{3,4})( примерно | приблизительно | почти | плюс | минус | )((\d+,|)(\d+)( - | или )|)(\d+,|)(\d+)( ([а-яё]+([иы]х|[ео]й|[ео]го) |и более |и менее |)([а-яё]+)|)\b', text):
        if m.group(2)[1:-1] not in ("них", "которых"):
            if m.group(3) == '':
                pre = ''
            else:
                if m.group(4):
                    pre = fraction(m.group(4)[:-1], m.group(5), 1)
                else:
                    pre = cardinal(m.group(5), r_ca)
                if condition(m.group(5)) and m.group(12) is not None:
                    attr = words.get_attr(m.group(12))
                    if m.group(9) and attr.have([Z_GENDER], None, [1]):
                        pre = pre[:-2] + 'й'
                    elif m.group(12) == 'суток':
                        pre = pre[:-3] + 'их'
                pre += m.group(6)
            if m.group(7):
                number = fraction(m.group(7)[:-1], m.group(8), 1)
            else:
                number = cardinal(m.group(8), r_ca)
                attr = words.get_attr(m.group(12))
                if condition(m.group(8)) and attr.have(Z_GENDER, False, [1]):
                    number = number[:-2] + 'й'
                elif (m.group(9) and (attr.have(None, True, [1])
                      or m.group(12) == 'суток')):
                        number = cardinal(m.group(8), r_ca)
                        if m.group(12) == 'суток' and number[-6:] == 'одного':
                            number = number[:-3] + 'их'
            new = m.group(1) + m.group(2) + pre + number + m.group(9)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'(\s|\A|\(| )((\d+) - |)(1|\d*[02-9]1)(( [а-яё]+[ео](й|го) | )([а-яё]+))\b', text):
        attr = words.get_attr(m.group(8))
        if attr.have(None, False, [1]):
            number = cardinal(m.group(4), r_ca)
            if attr.gender == Z_GENDER:
                number = number[:-2] + 'й'
            if m.group(2) == '':
                pre = ''
            else:
                pre = cardinal(m.group(3), r_ca)
                if attr.gender == Z_GENDER and number[-2:] == 'го':
                    pre = pre[:-2] + 'й'
                pre += ' - '
            new = m.group(1) + pre + number + m.group(5)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'(\s|\A|\(| )((\d+)( [-и] | или )|)(\d*[02-9][234]|[234])(( [а-яё]+[иы]х | )([а-яё]+))\b(.)', text):
        attr = words.get_attr(m.group(8))
        if attr.have(None, True, [1]):
            if m.group(2) == '':
                number = ''
            else:
                number = cardinal(m.group(3), r_ca) + m.group(4)
                if attr.gender == Z_GENDER and number[-2:] == 'го':
                    number = number[:-2] + 'й'
            new = (m.group(1) + number + cardinal(m.group(5), r_ca) +
                   m.group(6) + m.group(9))
            text = text.replace(m.group(), new, 1)

    # Предложный падеж
    for m in finditer(r'\b([Вв]|[Нн]а|[Оо]б?|[Пп]ри)(( почти | примерно | приблизительно | плюс | минус | )(\d+)( [-и] | или )| )(почти |примерно |приблизительноплюс |минус |)(\d+)( ([а-яё]+([иы]х|[ео]м) |)([а-яё]+([ая]х|е|и|у)))\b', text):
        if m.group(2) == ' ':
            pre = ' '
        else:
            pre = m.group(3) + cardinal(m.group(4), p_ca)
            a = words.have(m.group(11), None, False, [2, 5])
            b = words.have(m.group(11)[:-1] + 'м', [Z_GENDER], True, [2])
            if condition(m.group(4)) and (a or b):
                pre = pre[:-1] + 'й'
            elif m.group(11) == 'сутках':
                pre = pre[:-2] + 'их'
            pre += m.group(5)
        number = ''
        if m.group(12) == 'ах' or m.group(12) == 'ях':
            number = cardinal(m.group(7), p_ca)
        if condition(m.group(7)):
            attr = words.get_attr(m.group(11))
            if attr.have([M_GENDER, S_GENDER], False, [5]):
                number = cardinal(m.group(7), p_ca)
            elif attr.have([Z_GENDER], False, [2, 5]):
                number = cardinal(m.group(7), p_ca)[:-1] + 'й'
            elif m.group(11) == 'сутках':
                number = cardinal(m.group(7), p_ca)[:-2] + 'их'
        elif m.group(12) == 'ах' or m.group(12) == 'ях':
            number = cardinal(m.group(7), p_ca)
        if number:
            new = m.group(1) + pre + m.group(6) + number + m.group(8)
            text = text.replace(m.group(), new, 1)

    # Предлоги предложного падежа
    for m in finditer(r'\b([Оо]б?|[Пп]ри)( (\d+)( [-и] | или )| )(\d+)\b', text):
        number = ' '
        if m.group(2) != ' ':
            number += cardinal(m.group(3), p_ca) + m.group(4)
        new = m.group(1) + number + cardinal(m.group(5), p_ca)
        text = text.replace(m.group(), new, 1)

    # Женский род (иминетельный/винительный падежи)
    for m in finditer(r'(\s|\A|\(| )(((\d+)( - | или | и ))|)(\d+)(( [а-яё]+([ая]я|[иы][ех])|) ([а-яё]+))', text):
        attr = words.get_attr(m.group(10))
        a = attr.have([Z_GENDER], None, [1])
        b = attr.have([Z_GENDER], False, [0])
        if (a or b):
            if m.group(2) == '':
                pre = ''
            else:
                pre = feminin(m.group(4)) + m.group(5)
            new = m.group(1) + pre + feminin(m.group(6)) + m.group(7)
            text = text.replace(m.group(), new, 1)

    # Винительный падеж
    for m in finditer(r'\b([Зз]а |[Пп]ро |[Чч]ерез |состав[аеилотя]{2,4} )(\d+)(( [а-яё]+([ая]я|[ую]ю|[ео]е|[иы][йх]) | )([а-яё]+))\b', text):
        number = cardinal(m.group(2), v_ca)
        if number[-3:] == 'дин':
            attr = words.get_attr(m.group(6))
            if attr.have([Z_GENDER], False, [3]):
                number = number[:-2] + 'ну'
            elif attr.have([S_GENDER], False, [0, 3]):
                number = number[:-2] + 'но'
        text = text.replace(m.group(), m.group(1) + number + m.group(3), 1)

    for m in finditer(r'\b([Нн]а )(\d+) ([а-яё]+)\b', text):
        attr = words.get_attr(m.group(3))
        if attr.have(None, True, [1]):
            new = m.group(1) + cardinal(m.group(2), v_ca) + ' ' + m.group(3)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'\b(\d*[02-9]1|1)(( [а-яё]+[ео]го | )([а-яё]+))\b', text):
        attr = words.get_attr(m.group(4))
        if attr.have([M_GENDER], False, [3]):
            new = cardinal(m.group(1), v_ca)[:-2] + 'ного' + m.group(2)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'\b(\d*[02-9]1|1)(( [а-яё]+[ую]ю | )([а-яё]+))', text):
        attr = words.get_attr(m.group(4))
        if attr.have([Z_GENDER], False, [3]):
            new = cardinal(m.group(1), v_ca)[:-2] + 'ну' + m.group(2)
            text = text.replace(m.group(), new, 1)

    for m in finditer(r'\b(\d*[02-9][2-4]|[2-4])(( [а-яё]+[иы]х | )([а-яё]+))', text):
        attr = words.get_attr(m.group(4))
        if attr.have([M_GENDER], True, [3]):
            number = cardinal(m.group(1), v_ca)
            if number[-3:] == 'два':
                number = number[:-1] + 'ух'
            else:
                number = number[:-1] + 'ёх'
            text = text.replace(m.group(), number + m.group(2), 1)

    for m in finditer(r'\b([Вв] )(\d+)( раз[а]?)\b', text):
        new = m.group(1) + cardinal(m.group(2), v_ca) + m.group(3)
        text = text.replace(m.group(), new, 1)

    for m in finditer(r'([Сс]тои(т[ь]?|л[аио]?|вш[аеиймя]{2,3})) (\d+) ([а-яё]+)\b', text):
        number = cardinal(m.group(3), v_ca)
        if number[-3:] == 'дин' and m.group(4) in ('копейку', 'гривну', 'драхму', 'марку'):
            number = number[:-2] + 'ну'
        elif number[-3:] == 'два' and m.group(4) in ('копейки', 'гривны', 'драхмы', 'марки'):
            number = number[:-1] + 'е'
        new = m.group(1) + ' ' + number + ' ' + m.group(4)
        text = text.replace(m.group(), new, 1)

    # Средний род (именительный/винительный падежи)
    for m in finditer(r'\b(\d*[02-9]1|1) (([а-яё]+[ео]е |)([а-яё]+[ео]))\b', text):
        attr = words.get_attr(m.group(4))
        if attr.have([S_GENDER], False, [0, 3]):
            if len(m.group(1)) > 1:
                if int(m.group(1)[:-1]) != 0:
                    number = m.group(1)[:-1] + '0_одно'
                else:
                    number = m.group(1)[:-1] + '_одно'
            else:
                number = m.group(1)[:-1] + 'одно'
            text = text.replace(m.group(), number + ' ' + m.group(2), 1)

    # Дательный падеж
    for m in finditer(r'((\d+)( [-и] | или )|)(\d+)(( [а-яё]+([иы]м|[ео]му) | )([а-яё]+([аиыя]м|у|ю|е)))\b', text):
        if m.group(1) == '':
            pre = ''
        else:
            pre = ' ' + cardinal(m.group(2), d_ca)
            attr = words.get_attr(m.group(8))
            a = attr.have([Z_GENDER], None, [2])
            b = attr.have([Z_GENDER], False, [5])
            if condition(m.group(2)) and (a or b):
                pre = pre[:-2] + 'й'
            elif m.group(8) == 'суткам':
                pre = pre[:-3] + 'им'
            pre += m.group(3)
        number = ''
        if condition(m.group(4)):
            attr = words.get_attr(m.group(8))
            if m.group(8)[-1] == 'у' or m.group(8)[-1] == 'ю':
                number = cardinal(m.group(4), d_ca)
            elif attr.have([Z_GENDER], False, [2, 5]):
                number = cardinal(m.group(4), d_ca)[:-2] + 'й'
            elif m.group(8) == 'суткам':
                number = cardinal(m.group(4), d_ca)[:-3] + 'им'
        elif m.group(9) == 'ам' or m.group(9) == 'ям':
            number = cardinal(m.group(4), d_ca)
        if number:
            text = text.replace(m.group(), pre + number + m.group(5), 1)

    # Предлоги дательного падежа
    for m in finditer(r'\b([Кк]|рав[нагеийлмоcуюыхья]{2,6})( (\d+)( [-и] | или )| )(\d+)\b', text):
        number = ' '
        if m.group(2) != ' ':
            number += cardinal(m.group(3), d_ca) + m.group(4)
        new = m.group(1) + number + cardinal(m.group(5), d_ca)
        text = text.replace(m.group(), new, 1)

    # Существует только во мн. числе
    for m in finditer(r'\b((\d+) - |)((\d+) (сутки|суток))', text):
        if m.group(1):
            pre = daynight(m.group(2), m.group(5)) + '-'
        else:
            pre = ''
        new = pre + daynight(m.group(4), m.group(5)) + ' ' + m.group(5)
        text = text.replace(m.group(), new, 1)

    # Предлог "по" при указании количества
    for m in finditer(r'\b([Пп]о )(\d*1(000){1,3})\b', text):
        new = m.group(1) + cardinal(m.group(2), d_ca)
        text = text.replace(m.group(), new, 1)

    # Десятичные дроби в им. пад.
    for m in finditer(r'\b(\d+),(\d+)(\b|\Z)', text):
        new = fraction(m.group(1), m.group(2)) + m.group(3)
        text = text.replace(m.group(), new, 1)

    # Необязательная замена "_" (используется при обработке)
    text = sub('_', ' ', text)

    # Буквы греческого алфавита
    for j in greekletters:
        text = text.replace(j, letternames[greekletters.index(j)//2], 1)

    return text
